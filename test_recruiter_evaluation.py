#!/usr/bin/env python
"""
Script de test pour le syst√®me d'√©valuation recruteur
Teste les endpoints API et la logique m√©tier du mod√®le RecruiterEvaluation
"""

import os
import sys
import django
from django.conf import settings

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'prototype.settings')
sys.path.append('backend')
django.setup()

from interviews.models import RecruiterEvaluation, InterviewAnswer, InterviewCampaign, InterviewQuestion
from users.models import CustomUser
from django.test import TestCase
from rest_framework.test import APIClient
from rest_framework import status
import json

def test_recruiter_evaluation_model():
    """Test du mod√®le RecruiterEvaluation"""
    print("üß™ Test du mod√®le RecruiterEvaluation...")
    
    try:
        # V√©rifier que le mod√®le existe
        print(f"‚úÖ Mod√®le RecruiterEvaluation trouv√©")
        print(f"   - Champs: {[field.name for field in RecruiterEvaluation._meta.fields]}")
        
        # V√©rifier les choix de recommandation
        choices = RecruiterEvaluation.RECOMMENDATION_CHOICES
        print(f"   - Choix de recommandation: {choices}")
        
        # V√©rifier les m√©thodes
        methods = [method for method in dir(RecruiterEvaluation) if not method.startswith('_')]
        print(f"   - M√©thodes disponibles: {methods}")
        
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors du test du mod√®le: {e}")
        return False

def test_serializer():
    """Test du serializer RecruiterEvaluation"""
    print("\nüß™ Test du serializer RecruiterEvaluationSerializer...")
    
    try:
        from interviews.serializers import RecruiterEvaluationSerializer
        
        # Donn√©es de test
        test_data = {
            'communication_score': 85.0,
            'communication_feedback': 'Tr√®s bonne communication',
            'confidence_score': 90.0,
            'confidence_feedback': 'Candidat tr√®s confiant',
            'relevance_score': 80.0,
            'relevance_feedback': 'R√©ponse pertinente',
            'overall_score': 85.0,
            'overall_feedback': 'Bon candidat dans l\'ensemble',
            'recommendation': 'good'
        }
        
        serializer = RecruiterEvaluationSerializer(data=test_data)
        is_valid = serializer.is_valid()
        
        print(f"‚úÖ Serializer cr√©√© avec succ√®s")
        print(f"   - Validation: {'‚úÖ Valide' if is_valid else '‚ùå Invalide'}")
        
        if not is_valid:
            print(f"   - Erreurs: {serializer.errors}")
        
        return is_valid
    except Exception as e:
        print(f"‚ùå Erreur lors du test du serializer: {e}")
        return False

def test_viewset():
    """Test du ViewSet RecruiterEvaluation"""
    print("\nüß™ Test du ViewSet RecruiterEvaluationViewSet...")
    
    try:
        from interviews.views import RecruiterEvaluationViewSet
        
        viewset = RecruiterEvaluationViewSet()
        print(f"‚úÖ ViewSet cr√©√© avec succ√®s")
        print(f"   - Actions disponibles: {list(viewset.get_extra_actions())}")
        
        # V√©rifier les permissions
        permission_classes = viewset.permission_classes
        print(f"   - Classes de permission: {[cls.__name__ for cls in permission_classes]}")
        
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors du test du ViewSet: {e}")
        return False

def test_urls():
    """Test des URLs"""
    print("\nüß™ Test des URLs...")
    
    try:
        from django.urls import reverse
        from django.conf.urls import include
        
        # Tester si l'URL est configur√©e
        try:
            from interviews.urls import router
            registered_routes = [route for route in router.registry]
            print(f"‚úÖ Routes enregistr√©es: {registered_routes}")
            
            # Chercher la route recruiter-evaluations
            recruiter_eval_route = None
            for prefix, viewset, basename in router.registry:
                if 'recruiter' in prefix.lower() or 'evaluation' in prefix.lower():
                    recruiter_eval_route = (prefix, viewset, basename)
                    break
            
            if recruiter_eval_route:
                print(f"‚úÖ Route d'√©valuation recruteur trouv√©e: {recruiter_eval_route}")
            else:
                print("‚ö†Ô∏è  Route d'√©valuation recruteur non trouv√©e dans le routeur")
            
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur lors de la v√©rification des routes: {e}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test des URLs: {e}")
        return False

def test_database_connection():
    """Test de la connexion √† la base de donn√©es"""
    print("\nüß™ Test de la connexion √† la base de donn√©es...")
    
    try:
        from django.db import connection
        
        with connection.cursor() as cursor:
            # V√©rifier si la table existe
            cursor.execute("""
                SELECT name FROM sqlite_master 
                WHERE type='table' AND name='interviews_recruiterevaluation';
            """)
            
            result = cursor.fetchone()
            if result:
                print("‚úÖ Table interviews_recruiterevaluation existe")
                
                # V√©rifier la structure de la table
                cursor.execute("PRAGMA table_info(interviews_recruiterevaluation);")
                columns = cursor.fetchall()
                print(f"   - Colonnes: {[col[1] for col in columns]}")
                
                return True
            else:
                print("‚ùå Table interviews_recruiterevaluation n'existe pas")
                return False
                
    except Exception as e:
        print(f"‚ùå Erreur lors du test de la base de donn√©es: {e}")
        return False

def main():
    """Fonction principale de test"""
    print("üöÄ D√©marrage des tests du syst√®me d'√©valuation recruteur\n")
    
    tests = [
        test_recruiter_evaluation_model,
        test_serializer,
        test_viewset,
        test_urls,
        test_database_connection
    ]
    
    results = []
    for test in tests:
        try:
            result = test()
            results.append(result)
        except Exception as e:
            print(f"‚ùå Erreur inattendue lors du test {test.__name__}: {e}")
            results.append(False)
    
    # R√©sum√©
    print(f"\nüìä R√©sum√© des tests:")
    print(f"   - Tests r√©ussis: {sum(results)}/{len(results)}")
    print(f"   - Tests √©chou√©s: {len(results) - sum(results)}/{len(results)}")
    
    if all(results):
        print("\nüéâ Tous les tests sont pass√©s avec succ√®s!")
        print("‚úÖ Le syst√®me d'√©valuation recruteur est pr√™t √† √™tre utilis√©.")
    else:
        print("\n‚ö†Ô∏è  Certains tests ont √©chou√©. V√©rifiez les erreurs ci-dessus.")
    
    return all(results)

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
