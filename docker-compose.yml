services:
  # Service de la base de données
  db:
    image: postgres:16
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=jobgatedb
      - POSTGRES_USER=jobgateuser
      - POSTGRES_PASSWORD=jobgatepass
    # Optimisations pour accélérer démarrage PostgreSQL
    command: postgres -c fsync=off -c synchronous_commit=off -c full_page_writes=off
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-jobgateuser} -d ${POSTGRES_DB:-jobgatedb}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Service Backend Django
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    command: >
      sh -c "./wait-for-db.sh db &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./backend:/app  # Synchronise le code en direct
      # Éviter de synchroniser les fichiers cache et autres
      - /app/node_modules
      - /app/__pycache__
      - /app/*.pyc
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_NAME=jobgatedb
      - POSTGRES_USER=jobgateuser
      - POSTGRES_PASSWORD=jobgatepass
      - POSTGRES_HOST=db
      # Variable pour signaler que nous sommes en environnement Docker
      - DOCKER_ENVIRONMENT=1
      # Configuration SendGrid pour l'envoi d'emails
      - SENDGRID_API_KEY=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
      - DEFAULT_FROM_EMAIL=JobGate <achyounes737@gmail.com>
      - FRONTEND_BASE_URL=${FRONTEND_BASE_URL:-http://localhost:3000}
      # Configuration Firebase
      - USE_FIREBASE_STORAGE=${USE_FIREBASE_STORAGE:-false}
      - FIREBASE_STORAGE_BUCKET=${FIREBASE_STORAGE_BUCKET}
      - FIREBASE_CREDENTIALS=${FIREBASE_CREDENTIALS}
      - FIREBASE_CREDENTIALS_PATH=${FIREBASE_CREDENTIALS_PATH}
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Service Frontend React
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app # Synchronise le code en direct
      # Éviter de synchroniser les fichiers node_modules
      - /app/node_modules
    ports:
      - "3000:3000"
    environment:
      - CHOKIDAR_USEPOLLING=true # Active le hot-reload de React dans Docker
      # Variables pour améliorer les performances de Node.js
      - NODE_ENV=development
    depends_on:
      backend:
        condition: service_started

volumes:
  postgres_data: