#!/usr/bin/env python
"""
Test script pour v√©rifier l'installation et le fonctionnement du syst√®me d'√©valuation IA vid√©o.
"""

import os
import sys
import django
from pathlib import Path

# Ajouter le r√©pertoire backend au path
backend_path = Path(__file__).parent / 'backend'
sys.path.insert(0, str(backend_path))

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'prototype.settings')
django.setup()

def test_imports():
    """Test des imports des d√©pendances IA"""
    print("üîç Test des imports...")
    
    try:
        import whisper
        print("‚úÖ Whisper import√© avec succ√®s")
    except ImportError as e:
        print(f"‚ùå Erreur import Whisper: {e}")
        return False
    
    try:
        import torch
        print(f"‚úÖ PyTorch import√© avec succ√®s (version: {torch.__version__})")
    except ImportError as e:
        print(f"‚ùå Erreur import PyTorch: {e}")
        return False
    
    try:
        import transformers
        print(f"‚úÖ Transformers import√© avec succ√®s (version: {transformers.__version__})")
    except ImportError as e:
        print(f"‚ùå Erreur import Transformers: {e}")
        return False
    
    try:
        import ffmpeg
        print("‚úÖ FFmpeg-python import√© avec succ√®s")
    except ImportError as e:
        print(f"‚ùå Erreur import FFmpeg-python: {e}")
        return False
    
    try:
        import google.generativeai as genai
        print("‚úÖ Google Generative AI import√© avec succ√®s")
    except ImportError as e:
        print(f"‚ùå Erreur import Google Generative AI: {e}")
        return False
    
    return True

def test_django_models():
    """Test des mod√®les Django"""
    print("\nüîç Test des mod√®les Django...")
    
    try:
        from interviews.models import AiEvaluation, InterviewAnswer, InterviewQuestion, InterviewCampaign
        print("‚úÖ Mod√®les Django import√©s avec succ√®s")
        
        # V√©rifier que le mod√®le AiEvaluation a les bons champs
        fields = [field.name for field in AiEvaluation._meta.fields]
        required_fields = ['candidate', 'interview_answer', 'transcription', 'ai_score', 'ai_feedback']
        
        for field in required_fields:
            if field in fields:
                print(f"‚úÖ Champ {field} pr√©sent dans AiEvaluation")
            else:
                print(f"‚ùå Champ {field} manquant dans AiEvaluation")
                return False
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Erreur import mod√®les Django: {e}")
        return False

def test_ai_service():
    """Test du service d'√©valuation IA"""
    print("\nüîç Test du service d'√©valuation IA...")
    
    try:
        from interviews.ai_evaluation_service import AIVideoEvaluationService
        print("‚úÖ Service d'√©valuation IA import√© avec succ√®s")
        
        # Cr√©er une instance du service
        service = AIVideoEvaluationService()
        print("‚úÖ Instance du service cr√©√©e avec succ√®s")
        
        # Test de chargement du mod√®le Whisper (sans l'utiliser)
        print("‚úÖ Service d'√©valuation IA fonctionnel")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur service d'√©valuation IA: {e}")
        return False

def test_api_views():
    """Test des vues API"""
    print("\nüîç Test des vues API...")
    
    try:
        from interviews.views import EvaluateVideoView, AiEvaluationViewSet
        print("‚úÖ Vues API import√©es avec succ√®s")
        
        from interviews.serializers import AiEvaluationSerializer, EvaluateVideoRequestSerializer
        print("‚úÖ Serializers import√©s avec succ√®s")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Erreur import vues API: {e}")
        return False

def test_whisper_basic():
    """Test basique de Whisper"""
    print("\nüîç Test basique de Whisper...")
    
    try:
        import whisper
        
        # Charger le mod√®le le plus petit pour le test
        print("üì• Chargement du mod√®le Whisper 'tiny' (test)...")
        model = whisper.load_model("tiny")
        print("‚úÖ Mod√®le Whisper charg√© avec succ√®s")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test Whisper: {e}")
        return False

def main():
    """Fonction principale de test"""
    print("üöÄ Test du syst√®me d'√©valuation IA vid√©o - JobGate")
    print("=" * 60)
    
    tests = [
        ("Imports des d√©pendances", test_imports),
        ("Mod√®les Django", test_django_models),
        ("Service d'√©valuation IA", test_ai_service),
        ("Vues API", test_api_views),
        ("Whisper basique", test_whisper_basic),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Erreur inattendue dans {test_name}: {e}")
            results.append((test_name, False))
    
    # R√©sum√©
    print("\n" + "=" * 60)
    print("üìä R√âSUM√â DES TESTS")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASS√â" if result else "‚ùå √âCHOU√â"
        print(f"{test_name:<30} {status}")
        if result:
            passed += 1
    
    print(f"\nüéØ R√©sultat global: {passed}/{total} tests pass√©s")
    
    if passed == total:
        print("üéâ Tous les tests sont pass√©s ! Le syst√®me d'√©valuation IA est pr√™t.")
        print("\nüìã Prochaines √©tapes:")
        print("1. Configurer GOOGLE_GEMINI_API_KEY dans .env")
        print("2. Installer FFmpeg sur le syst√®me")
        print("3. Ex√©cuter les migrations Django")
        print("4. Tester l'API avec une vraie vid√©o")
    else:
        print("‚ö†Ô∏è  Certains tests ont √©chou√©. V√©rifiez les erreurs ci-dessus.")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
