#!/usr/bin/env python
"""
Script de test pour valider la g√©n√©ration de questions IA sp√©cifiques
"""
import os
import sys
import django

# Configuration Django
sys.path.append('backend')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'prototype.settings')
django.setup()

from interviews.ai_service import AIInterviewQuestionGenerator

def test_question_generation():
    """Test avec diff√©rents types d'offres d'emploi"""
    
    # Initialisation du g√©n√©rateur
    generator = AIInterviewQuestionGenerator()
    
    # Test 1: Ing√©nieur Civil
    print("üîç TEST 1: Ing√©nieur Civil")
    print("=" * 50)
    
    offer_title = "Ing√©nieur Civil - Projets BTP"
    offer_description = """
    Nous recherchons un ing√©nieur civil exp√©riment√© pour superviser nos projets de construction.
    Vous serez responsable de la conception des structures, du suivi de chantier et du respect des normes.
    Ma√Ætrise d'AutoCAD et des normes marocaines requise.
    """
    requirements = "AutoCAD, normes NM, gestion de projet, b√©ton arm√©"
    
    questions = generator.generate_questions(
        offer_title=offer_title,
        offer_description=offer_description,
        requirements=requirements,
        number_of_questions=3,
        difficulty='medium'
    )
    
    print(f"Questions g√©n√©r√©es: {len(questions)}")
    for i, q in enumerate(questions, 1):
        print(f"{i}. {q['question']}")
        print(f"   Type: {q['type']} | Difficult√©: {q['difficulty']}")
        print()
    
    # Test 2: D√©veloppeur React
    print("üîç TEST 2: D√©veloppeur React")
    print("=" * 50)
    
    offer_title = "D√©veloppeur Frontend React Senior"
    offer_description = """
    Rejoignez notre √©quipe pour d√©velopper des applications web modernes avec React.
    Vous travaillerez sur des projets e-commerce avec Redux, TypeScript et optimisation des performances.
    """
    requirements = "React, Redux, TypeScript, JavaScript, HTML/CSS, Git"
    
    questions = generator.generate_questions(
        offer_title=offer_title,
        offer_description=offer_description,
        requirements=requirements,
        number_of_questions=3,
        difficulty='hard'
    )
    
    print(f"Questions g√©n√©r√©es: {len(questions)}")
    for i, q in enumerate(questions, 1):
        print(f"{i}. {q['question']}")
        print(f"   Type: {q['type']} | Difficult√©: {q['difficulty']}")
        print()
    
    # Test 3: Analyste Financier
    print("üîç TEST 3: Analyste Financier")
    print("=" * 50)
    
    offer_title = "Analyste Financier - Risques de Cr√©dit"
    offer_description = """
    Poste d'analyste financier sp√©cialis√© dans l'√©valuation des risques de cr√©dit.
    Analyse des dossiers de financement, mod√©lisation financi√®re et reporting.
    Ma√Ætrise d'Excel avanc√© et des outils de risk management requis.
    """
    requirements = "Excel, mod√©lisation financi√®re, risk management, analyse cr√©dit"
    
    questions = generator.generate_questions(
        offer_title=offer_title,
        offer_description=offer_description,
        requirements=requirements,
        number_of_questions=3,
        difficulty='medium'
    )
    
    print(f"Questions g√©n√©r√©es: {len(questions)}")
    for i, q in enumerate(questions, 1):
        print(f"{i}. {q['question']}")
        print(f"   Type: {q['type']} | Difficult√©: {q['difficulty']}")
        print()

if __name__ == "__main__":
    test_question_generation()
