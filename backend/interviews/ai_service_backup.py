import os
import json
import logging
import re
import random
from typing import List, Dict, Any, Optional
from django.conf import settings
import google.generativeai as genai
from google.generativeai.types import HarmCategory, HarmBlockThreshold

logger = logging.getLogger(__name__)

class AIInterviewQuestionGenerator:
    """
    Service de g√©n√©ration de questions d'entretien avec Google Gemini
    15 requ√™tes/minute gratuites - Excellent pour JobGate
    """
    
    def __init__(self):
        # Chercher la cl√© API dans plusieurs variables d'environnement
        self.api_key = (
            getattr(settings, 'GOOGLE_API_KEY', None) or 
            getattr(settings, 'GOOGLE_GEMINI_API_KEY', None) or 
            os.getenv('GOOGLE_API_KEY') or 
            os.getenv('GOOGLE_GEMINI_API_KEY')
        )
        self.use_gemini = getattr(settings, 'USE_GEMINI', True) or getattr(settings, 'USE_GOOGLE_GEMINI', True)
        
        # Banque de questions comportementales statiques
        self.static_behavioral_questions = [
            # TRAVAIL EN √âQUIPE
            "Parle-moi d'une fois o√π tu as d√ª collaborer avec une √©quipe difficile. Comment as-tu g√©r√© la situation ?",
            "Donne un exemple d'un projet o√π ton r√¥le √©tait crucial pour la r√©ussite collective.",
            
            # GESTION DES CONFLITS
            "Raconte une situation o√π tu n'√©tais pas d'accord avec ton sup√©rieur ou un coll√®gue. Comment as-tu r√©agi ?",
            "D√©cris un conflit que tu as aid√© √† r√©soudre.",
            
            # PRISE D'INITIATIVE
            "Donne un exemple o√π tu as pris une d√©cision sans attendre d'instructions.",
            "Parle-moi d'une am√©lioration que tu as propos√©e et mise en place dans ton travail.",
            
            # GESTION DU STRESS & DES PRIORIT√âS
            "Raconte une exp√©rience o√π tu as d√ª g√©rer plusieurs t√¢ches urgentes en m√™me temps.",
            "Comment as-tu r√©agi dans une situation de forte pression avec peu de temps ?",
            
            # R√âSOLUTION DE PROBL√àME
            "Donne un exemple d'un probl√®me complexe que tu as r√©solu. Quelle a √©t√© ton approche ?",
            "D√©cris une situation o√π tu n'avais pas toutes les informations n√©cessaires mais tu as d√ª agir rapidement.",
            
            # ADAPTABILIT√â & APPRENTISSAGE
            "Parle-moi d'une fois o√π tu as d√ª apprendre une nouvelle comp√©tence rapidement pour accomplir une mission.",
            "Comment t'es-tu adapt√© √† un changement impr√©vu au travail ?"
        ]
        
        try:
            # Configuration Gemini
            if self.api_key:
                genai.configure(api_key=self.api_key)
            
            # Configuration de g√©n√©ration
            generation_config = {
                "temperature": 0.7,
                "top_p": 0.8,
                "top_k": 40,
                "max_output_tokens": 2048,
            }
            
            # Configuration de s√©curit√© (permissive pour questions d'entretien)
            safety_settings = {
                HarmCategory.HARM_CATEGORY_HARASSMENT: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
                HarmCategory.HARM_CATEGORY_HATE_SPEECH: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
                HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
                HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
            }
            
            self.model = genai.GenerativeModel(
                model_name="gemini-1.5-flash",
                generation_config=generation_config,
                safety_settings=safety_settings
            )
            
            logger.info("‚úÖ Google Gemini initialis√© avec succ√®s (gratuit)")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur initialisation Gemini: {e}")
            self.model = None
    
    def generate_questions(self, offer_title: str, offer_description: str, 
                          number_of_questions: int = 5, difficulty: str = 'medium',
                          requirements: str = '', behavioral_count: int = None, 
                          technical_count: int = None) -> List[Dict[str, Any]]:
        """
        G√©n√®re des questions d'entretien personnalis√©es avec Google Gemini
        
        Args:
            offer_title: Titre de l'offre d'emploi
            offer_description: Description d√©taill√©e du poste
            number_of_questions: Nombre de questions √† g√©n√©rer (3-10)
            difficulty: Niveau de difficult√© (easy/medium/hard)
            requirements: Pr√©requis et comp√©tences requises pour le poste
        
        Returns:
            Liste de questions format√©es pour JobGate
        """
        logger.info(f"ü§ñ G√©n√©ration de {number_of_questions} questions avec Gemini")
        logger.info(f"üìã Poste: {offer_title}")
        logger.info(f"üéØ Difficult√©: {difficulty}")
        logger.info(f"üîß Mod√®le initialis√©: {self.model is not None}")
        logger.info(f"üîë API Key pr√©sente: {self.api_key is not None}")
        
        # Validation des param√®tres
        if not offer_title or len(offer_title.strip()) < 3:
            logger.error("‚ùå Titre de l'offre trop court")
            raise ValueError("Le titre de l'offre doit contenir au moins 3 caract√®res")
        
        if not offer_description or len(offer_description.strip()) < 20:
            logger.error("‚ùå Description de l'offre trop courte")
            raise ValueError("La description de l'offre doit contenir au moins 20 caract√®res")
        
        number_of_questions = max(3, min(10, number_of_questions))
        
        if not self.model:
            logger.error("‚ùå API Gemini non configur√©e")
            raise ValueError("L'API Google Gemini n'est pas configur√©e. Veuillez d√©finir GOOGLE_GEMINI_API_KEY dans vos variables d'environnement.")
        
        # G√©n√©ration uniquement avec Gemini - pas de fallback
        return self._generate_with_gemini(offer_title, offer_description, 
                                        number_of_questions, difficulty, requirements,
                                        behavioral_count, technical_count)
    
    def _generate_with_gemini(self, offer_title: str, offer_description: str, 
                             num_questions: int, difficulty: str, requirements: str = '', 
                             behavioral_count: int = None, technical_count: int = None) -> List[Dict[str, Any]]:
        """G√©n√®re les questions avec l'API Google Gemini"""
        
        # Question obligatoire de pr√©sentation
        mandatory_question = {
            "question": "Pr√©sentez-vous et dites-nous pourquoi vous choisissez de nous rejoindre ?",
            "type": "comportementale",
            "difficulty": difficulty,
            "expected_duration": 180,
            "skills_assessed": ["communication", "motivation", "pr√©sentation"],
            "order": 1,
            "generated_by": "mandatory",
            "offer_title": offer_title
        }
        
        # Gestion des compteurs sp√©cifiques
        if behavioral_count is not None and technical_count is not None:
            logger.info(f"üéØ Mode compteurs sp√©cifiques: {behavioral_count} comportementales + {technical_count} techniques")
            
            # Calculer le nombre total de questions IA √† g√©n√©rer
            ai_questions_count = behavioral_count + technical_count
            
            if ai_questions_count == 0:
                logger.info("‚ö†Ô∏è Aucune question IA demand√©e, retour de la question obligatoire uniquement")
                return [mandatory_question]
            
            logger.info(f"ü§ñ G√©n√©ration de {ai_questions_count} questions IA")
        else:
            # Mode classique
            ai_questions_count = num_questions - 1  # -1 pour la question obligatoire
            behavioral_count = max(1, ai_questions_count // 2)  # Au moins 1 comportementale
            technical_count = ai_questions_count - behavioral_count
            logger.info(f"üéØ Mode simple: {ai_questions_count} questions au total")
        
        # Mapping des difficult√©s
        difficulty_mapping = {
            'easy': 'd√©butant - questions g√©n√©rales et basiques',
            'medium': 'interm√©diaire - questions techniques mod√©r√©es', 
            'hard': 'avanc√© - questions techniques approfondies et cas complexes'
        }
        difficulty_desc = difficulty_mapping.get(difficulty, difficulty_mapping['medium'])
        
        # Analyse compl√®te et intelligente de l'offre d'emploi
        job_context = self._deep_analyze_job_offer(offer_title, offer_description, requirements)
        keywords = job_context['keywords']
        job_analysis = job_context['analysis']
        key_responsibilities = job_context['responsibilities']
        required_skills = job_context['skills']
        
        # Prompt ultra-sp√©cifique avec focus sur le domaine d√©tect√©
        main_keywords = ', '.join(keywords[:3]) if keywords else 'comp√©tences techniques'
        
        # D√©tection sp√©ciale pour cybers√©curit√©
        is_cybersecurity = any(term in offer_title.lower() for term in ['cybers√©curit√©', 'cyber', 's√©curit√©', 'security', 'pentest'])
        
        if is_cybersecurity:
            domain_focus = f"""
DOMAINE SP√âCIFIQUE: CYBERS√âCURIT√â
Concentrez-vous UNIQUEMENT sur:
- S√©curit√© des syst√®mes et r√©seaux
- Tests de p√©n√©tration et audit s√©curit√©  
- Gestion des incidents de s√©curit√©
- Cryptographie et chiffrement
- Outils: Burp Suite, Metasploit, Nmap, Wireshark
- Normes: ISO 27001, OWASP, NIST
- Certifications: CISSP, CEH, OSCP
"""
        else:
            domain_focus = f"DOMAINE: {job_analysis}"
        
        # Construction du prompt selon le mode
        if ai_behavioral_count is not None and ai_technical_count is not None:
            # Mode avanc√© avec compteurs sp√©cifiques
            if ai_behavioral_count > 0 and ai_technical_count > 0:
                # Les deux types demand√©s
                type_instructions = f"""
R√âPARTITION OBLIGATOIRE:
- {ai_behavioral_count} questions COMPORTEMENTALES (type: "comportementale")
- {ai_technical_count} questions TECHNIQUES (type: "technique")
TOTAL: {ai_questions_count} questions"""
            elif ai_behavioral_count > 0 and ai_technical_count == 0:
                # Seulement des questions comportementales
                type_instructions = f"""
G√âN√âREZ UNIQUEMENT {ai_behavioral_count} questions COMPORTEMENTALES (type: "comportementale")
AUCUNE question technique ne doit √™tre g√©n√©r√©e.
TOTAL: {ai_questions_count} questions"""
            elif ai_technical_count > 0 and ai_behavioral_count == 0:
                # Seulement des questions techniques
                type_instructions = f"""
G√âN√âREZ UNIQUEMENT {ai_technical_count} questions TECHNIQUES (type: "technique")
AUCUNE question comportementale ne doit √™tre g√©n√©r√©e.
TOTAL: {ai_questions_count} questions"""
            else:
                # Aucune question demand√©e (cas rare)
                type_instructions = "AUCUNE question √† g√©n√©rer."
        else:
            # Mode simple
            type_instructions = f"G√âN√âREZ {ai_questions_count} questions vari√©es (techniques et comportementales)"

        prompt = f"""
MISSION: Cr√©er {ai_questions_count} questions d'entretien pour:

POSTE: {offer_title}
{domain_focus}

MOTS-CL√âS OBLIGATOIRES: {main_keywords}

{type_instructions}

R√àGLES STRICTES:
1. Questions 100% sp√©cifiques au domaine du poste
2. Utiliser les mots-cl√©s: {main_keywords}
3. Niveau {difficulty_desc}
4. JAMAIS de questions g√©n√©riques
5. NE PAS inclure de question de pr√©sentation (d√©j√† g√©r√©e s√©par√©ment)
6. QUESTIONS COURTES: Maximum 1-2 lignes par question
7. CONCISION: Questions directes et pr√©cises, pas de longues explications
8. RESPECTER les types: "comportementale" ou "technique"

FORMAT JSON:
```json
[{{"question": "Question courte et directe ?", "type": "technique", "difficulty": "{difficulty}"}}]
```

EXEMPLES DE QUESTIONS COURTES:
TECHNIQUES:
- "Expliquez la diff√©rence entre Django et Flask."
- "Comment optimisez-vous une requ√™te SQL lente ?"
- "Quelle est votre approche pour d√©boguer du code React ?"

COMPORTEMENTALES (utilisez ces cat√©gories):
üîπ TRAVAIL EN √âQUIPE:
- "Parlez-moi d'une fois o√π vous avez d√ª collaborer avec une √©quipe difficile. Comment avez-vous g√©r√© la situation ?"
- "Donnez un exemple d'un projet o√π votre r√¥le √©tait crucial pour la r√©ussite collective."

üîπ GESTION DES CONFLITS:
- "Racontez une situation o√π vous n'√©tiez pas d'accord avec votre sup√©rieur ou un coll√®gue. Comment avez-vous r√©agi ?"
- "D√©crivez un conflit que vous avez aid√© √† r√©soudre."

üîπ PRISE D'INITIATIVE:
- "Donnez un exemple o√π vous avez pris une d√©cision sans attendre d'instructions."
- "Parlez-moi d'une am√©lioration que vous avez propos√©e et mise en place dans votre travail."

üîπ GESTION DU STRESS & PRIORIT√âS:
- "Racontez une exp√©rience o√π vous avez d√ª g√©rer plusieurs t√¢ches urgentes en m√™me temps."
- "Comment avez-vous r√©agi dans une situation de forte pression avec peu de temps ?"

üîπ R√âSOLUTION DE PROBL√àME:
- "Donnez un exemple d'un probl√®me complexe que vous avez r√©solu. Quelle a √©t√© votre approche ?"
- "D√©crivez une situation o√π vous n'aviez pas toutes les informations n√©cessaires mais vous avez d√ª agir rapidement."

üîπ ADAPTABILIT√â & APPRENTISSAGE:
- "Parlez-moi d'une fois o√π vous avez d√ª apprendre une nouvelle comp√©tence rapidement pour accomplir une mission."
- "Comment vous √™tes-vous adapt√© √† un changement impr√©vu au travail ?"

G√âN√âREZ {ai_questions_count} QUESTIONS COURTES:"""
        
        try:
            logger.info("üîÑ Envoi de la requ√™te √† Google Gemini...")
            logger.info(f"üîç PROMPT COMPLET ENVOY√â:\n{prompt}")
            
            # G√©n√©ration avec Gemini
            response = self.model.generate_content(prompt)
            
            if not response or not response.text:
                logger.error("‚ùå R√©ponse vide de Gemini")
                raise ValueError("Gemini n'a pas fourni de r√©ponse. Veuillez r√©essayer.")
            
            logger.info("‚úÖ R√©ponse re√ßue de Gemini")
            
            # Debug: Log de la r√©ponse brute
            logger.info(f"üîç R√©ponse Gemini brute: {response.text[:200]}...")
            
            # Extraction du JSON de la r√©ponse
            questions_data = self._parse_gemini_response(response.text)
            
            if not questions_data:
                logger.error("‚ùå Impossible de parser la r√©ponse Gemini")
                logger.info(f"üîç R√©ponse compl√®te: {response.text}")
                raise ValueError("La r√©ponse de Gemini n'a pas pu √™tre analys√©e. Veuillez r√©essayer.")
            
            # Validation que les questions sont sp√©cifiques au poste
            validated_questions = self._validate_question_relevance(questions_data, offer_title, keywords)
            
            # Validation stricte - on garde toutes les questions g√©n√©r√©es par Gemini
            if not validated_questions:
                logger.error("‚ùå Aucune question valide g√©n√©r√©e par Gemini")
                raise ValueError("Impossible de g√©n√©rer des questions pertinentes. Veuillez v√©rifier le titre et la description de l'offre.")
            
            logger.info(f"‚úÖ {len(validated_questions)}/{len(questions_data)} questions valid√©es par Gemini.")
            
            # Validation des types de questions selon les compteurs demand√©s
            if ai_behavioral_count is not None and ai_technical_count is not None:
                validated_questions = self._enforce_question_types(
                    validated_questions, ai_behavioral_count, ai_technical_count
                )
            
            # Validation et formatage des questions g√©n√©r√©es par l'IA
            formatted_questions = self._format_questions_for_jobgate(
                validated_questions, offer_title, difficulty
            )
            
            # Ajuster l'ordre des questions g√©n√©r√©es par l'IA (commencer √† 2)
            for i, question in enumerate(formatted_questions):
                question['order'] = i + 2
            
            # Combiner la question obligatoire avec les questions g√©n√©r√©es par l'IA
            all_questions = [mandatory_question] + formatted_questions
            
            logger.info(f"‚úÖ {len(all_questions)} questions au total (1 obligatoire + {len(formatted_questions)} g√©n√©r√©es par Gemini)")
            return all_questions
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'appel Gemini: {e}")
            logger.error(f"‚ùå D√©tails: {str(e)}")
            raise ValueError(f"Erreur lors de la g√©n√©ration des questions avec Gemini: {str(e)}")
    
    def _parse_gemini_response(self, response_text: str) -> Optional[List[Dict]]:
        """Parse la r√©ponse JSON de Gemini"""
        try:
            # Chercher le bloc JSON dans la r√©ponse
            json_match = re.search(r'```json\s*(.*?)\s*```', response_text, re.DOTALL)
            if json_match:
                json_text = json_match.group(1)
            else:
                # Si pas de bloc markdown, essayer de parser directement
                json_text = response_text.strip()
            
            # Parser le JSON
            questions_data = json.loads(json_text)
            
            if isinstance(questions_data, list):
                return questions_data
            else:
                logger.error(f"‚ùå Format de r√©ponse incorrect: {type(questions_data)}")
                return None
                
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå Erreur JSON: {e}")
            logger.error(f"R√©ponse brute: {response_text[:500]}...")
            return None
        except Exception as e:
            logger.error(f"‚ùå Erreur parsing: {e}")
            return None
    
    def _format_questions_for_jobgate(self, questions_data: List[Dict], 
                                     offer_title: str, difficulty: str) -> List[Dict[str, Any]]:
        """Formate les questions pour l'API JobGate"""
        formatted_questions = []
        
        for i, q_data in enumerate(questions_data):
            try:
                question_text = q_data.get('question', '').strip()
                if not question_text:
                    continue
                
                formatted_question = {
                    "question": question_text,
                    "type": q_data.get('type', 'comportementale'),
                    "expected_duration": q_data.get('expected_duration', 120),
                    "difficulty_level": difficulty,
                    "skills_assessed": q_data.get('skills_assessed', []),
                    "order": i + 1,
                    "generated_by": "google_gemini",
                    "offer_title": offer_title
                }
                
                formatted_questions.append(formatted_question)
                
            except Exception as e:
                logger.error(f"‚ùå Erreur formatage question {i}: {e}")
                continue
        
        return formatted_questions
    
    def _analyze_job_offer(self, title: str, requirements: str = '') -> str:
        """Analyse le titre du poste et les pr√©requis pour d√©terminer le type de poste"""
        title_lower = title.lower()
        req_lower = requirements.lower() if requirements else ''
        
        # D√©tection du type de poste avec analyse √©tendue - TOUTES LES ING√âNIERIES + CYBERS√âCURIT√â
        if any(keyword in title_lower for keyword in ['cybers√©curit√©', 'cyber s√©curit√©', 's√©curit√© informatique', 'security analyst', 'pentester', 'ethical hacker']):
            job_type = "Expert Cybers√©curit√© - Sp√©cialis√© en s√©curit√© des syst√®mes d'information et audit s√©curitaire"
        elif any(keyword in title_lower for keyword in ['ing√©nieur civil', 'g√©nie civil', 'btp', 'construction', 'travaux publics']):
            job_type = "Ing√©nieur Civil - Sp√©cialis√© en conception et gestion de projets BTP, ma√Ætrise des normes marocaines"
        elif any(keyword in title_lower for keyword in ['ing√©nieur √©lectrique', '√©lectrotechnique', 'g√©nie √©lectrique']):
            job_type = "Ing√©nieur √âlectrique - Expert en syst√®mes √©lectriques industriels et automatisation"
        elif any(keyword in title_lower for keyword in ['ing√©nieur m√©canique', 'g√©nie m√©canique', 'maintenance industrielle']):
            job_type = "Ing√©nieur M√©canique - Sp√©cialis√© en conception CAO et maintenance d'√©quipements"
        elif any(keyword in title_lower for keyword in ['ing√©nieur industriel', 'g√©nie industriel', 'processus']):
            job_type = "Ing√©nieur Industriel - Expert en optimisation des processus et Lean Manufacturing"
        elif any(keyword in title_lower for keyword in ['d√©veloppeur', 'developer', 'programmeur', 'software engineer']):
            job_type = "D√©veloppeur/Ing√©nieur Logiciel - Sp√©cialis√© en d√©veloppement d'applications"
        elif any(keyword in title_lower for keyword in ['data scientist', 'data engineer', 'machine learning', 'ia', 'ai']):
            job_type = "Data Scientist/Engineer - Expert en analyse de donn√©es et intelligence artificielle"
        elif any(keyword in title_lower for keyword in ['ing√©nieur chimique', 'g√©nie chimique', 'proc√©d√©s chimiques']):
            job_type = "Ing√©nieur Chimique - Sp√©cialis√© en proc√©d√©s industriels et contr√¥le qualit√©"
        elif any(keyword in title_lower for keyword in ['ing√©nieur a√©ronautique', 'a√©rospatial', 'aviation']):
            job_type = "Ing√©nieur A√©ronautique - Expert en conception et certification a√©ronautique"
        elif any(keyword in title_lower for keyword in ['ing√©nieur t√©l√©communications', 't√©l√©com', 'r√©seaux']):
            job_type = "Ing√©nieur T√©l√©communications - Sp√©cialis√© en r√©seaux et syst√®mes de communication"
        elif any(keyword in title_lower for keyword in ['ing√©nieur environnemental', 'environnement', 'd√©veloppement durable']):
            job_type = "Ing√©nieur Environnemental - Expert en impact environnemental et d√©veloppement durable"
        elif any(keyword in title_lower for keyword in ['√©conomiste', 'analyste √©conomique', '√©conomie']):
            job_type = "√âconomiste - Sp√©cialis√© en analyse √©conomique et politiques publiques"
        elif any(keyword in title_lower for keyword in ['analyste financier', 'finance', 'banque', 'cr√©dit']):
            job_type = "Analyste Financier - Expert en √©valuation financi√®re et gestion des risques"
        elif any(keyword in title_lower for keyword in ['commerce international', 'export', 'import']):
            job_type = "Sp√©cialiste Commerce International - Expert en d√©veloppement des march√©s export"
        elif any(keyword in title_lower for keyword in ['d√©veloppement √©conomique', 'coop√©ration', 'projets sociaux']):
            job_type = "Expert D√©veloppement √âconomique - Sp√©cialis√© en projets de d√©veloppement et coop√©ration"
        else:
            job_type = "Poste g√©n√©raliste"
        
        # Analyse des pr√©requis
        req_analysis = ""
        if requirements:
            req_lower = requirements.lower()
            tech_found = []
            
            # Technologies d√©tect√©es
            if 'python' in req_lower: tech_found.append('Python')
            if 'react' in req_lower: tech_found.append('React')
            if 'docker' in req_lower: tech_found.append('Docker')
            if 'kubernetes' in req_lower: tech_found.append('Kubernetes')
            if 'aws' in req_lower: tech_found.append('AWS')
            if 'tensorflow' in req_lower: tech_found.append('TensorFlow')
            if 'mlflow' in req_lower: tech_found.append('MLflow')
            
            if tech_found:
                req_analysis = f"Technologies requises: {', '.join(tech_found)}. "
        
        return f"{job_type}. {req_analysis}"
    
    def _deep_analyze_job_offer(self, title: str, description: str, requirements: str = '') -> Dict[str, Any]:
        """Analyse approfondie et intelligente de l'offre d'emploi pour extraction compl√®te du contexte"""
        import re
        
        # Combinaison de tous les textes pour analyse
        full_text = f"{title} {description} {requirements}".lower()
        
        # 1. Analyse du type de poste (existante am√©lior√©e)
        job_analysis = self._analyze_job_offer(title, requirements)
        
        # 2. Extraction intelligente des mots-cl√©s avec scoring
        keywords = self._extract_job_keywords(title, description, requirements)
        
        # 3. Extraction des responsabilit√©s cl√©s
        responsibilities = self._extract_responsibilities(description)
        
        # 4. Extraction des comp√©tences requises
        skills = self._extract_required_skills(description, requirements)
        
        # 5. Analyse du niveau d'exp√©rience requis
        experience_level = self._analyze_experience_level(full_text)
        
        # 6. D√©tection du secteur d'activit√©
        industry_sector = self._detect_industry_sector(full_text)
        
        # 7. Extraction des outils/technologies sp√©cifiques
        tools_technologies = self._extract_tools_technologies(full_text)
        
        return {
            'analysis': job_analysis,
            'keywords': keywords,
            'responsibilities': responsibilities,
            'skills': skills,
            'experience_level': experience_level,
            'industry_sector': industry_sector,
            'tools_technologies': tools_technologies
        }
    
    def _extract_responsibilities(self, description: str) -> List[str]:
        """Extrait les responsabilit√©s cl√©s de la description du poste"""
        if not description:
            return []
        
        responsibilities = []
        desc_lower = description.lower()
        
        # Patterns pour identifier les responsabilit√©s
        responsibility_patterns = [
            r'vous serez charg√©[e]? de ([^.]+)',
            r'vos missions[^:]*:([^.]+)',
            r'responsabilit√©s[^:]*:([^.]+)',
            r'vous devrez ([^.]+)',
            r'en charge de ([^.]+)',
            r'missions principales[^:]*:([^.]+)',
            r'vous aurez pour mission de ([^.]+)',
            r'votre r√¥le consistera √† ([^.]+)'
        ]
        
        for pattern in responsibility_patterns:
            matches = re.findall(pattern, desc_lower, re.IGNORECASE)
            for match in matches:
                clean_resp = match.strip().replace('\n', ' ').replace('  ', ' ')
                if len(clean_resp) > 10:
                    responsibilities.append(clean_resp)
        
        # Extraction par bullet points ou listes
        bullet_patterns = [
            r'[‚Ä¢\-\*]\s*([^‚Ä¢\-\*\n]+)',
            r'\d+\.\s*([^\n]+)'
        ]
        
        for pattern in bullet_patterns:
            matches = re.findall(pattern, description, re.MULTILINE)
            for match in matches:
                clean_resp = match.strip()
                if len(clean_resp) > 15 and any(verb in clean_resp.lower() for verb in ['g√©rer', 'd√©velopper', 'concevoir', 'analyser', 'superviser', 'coordonner']):
                    responsibilities.append(clean_resp)
        
        return list(set(responsibilities))[:5]  # Limiter √† 5 responsabilit√©s principales
    
    def _extract_required_skills(self, description: str, requirements: str) -> List[str]:
        """Extrait les comp√©tences requises sp√©cifiques"""
        full_text = f"{description} {requirements}".lower()
        skills = []
        
        # Patterns pour identifier les comp√©tences
        skill_patterns = [
            r'comp√©tences requises[^:]*:([^.]+)',
            r'profil recherch√©[^:]*:([^.]+)',
            r'vous ma√Ætrisez ([^.]+)',
            r'connaissance[s]? de ([^.]+)',
            r'exp√©rience avec ([^.]+)',
            r'ma√Ætrise de ([^.]+)',
            r'expertise en ([^.]+)',
            r'formation en ([^.]+)'
        ]
        
        for pattern in skill_patterns:
            matches = re.findall(pattern, full_text, re.IGNORECASE)
            for match in matches:
                clean_skill = match.strip().replace('\n', ' ').replace('  ', ' ')
                if len(clean_skill) > 5:
                    skills.append(clean_skill)
        
        # Comp√©tences techniques sp√©cifiques par domaine
        technical_skills = {
            'ing√©nierie': ['autocad', 'solidworks', 'catia', 'matlab', 'ansys', 'revit'],
            'd√©veloppement': ['python', 'java', 'react', 'angular', 'docker', 'kubernetes'],
            '√©conomie': ['excel', 'sap', 'stata', 'r', 'spss', 'tableau'],
            'finance': ['bloomberg', 'reuters', 'risk management', 'trading']
        }
        
        for domain, tech_list in technical_skills.items():
            for tech in tech_list:
                if tech in full_text:
                    skills.append(tech)
        
        return list(set(skills))[:8]  # Limiter √† 8 comp√©tences principales
    
    def _analyze_experience_level(self, full_text: str) -> str:
        """Analyse le niveau d'exp√©rience requis"""
        if any(term in full_text for term in ['junior', 'd√©butant', '0-2 ans', 'r√©cent dipl√¥m√©']):
            return "Junior (0-2 ans)"
        elif any(term in full_text for term in ['senior', 'exp√©riment√©', '5+ ans', 'plus de 5 ans']):
            return "Senior (5+ ans)"
        elif any(term in full_text for term in ['expert', 'lead', 'manager', '10+ ans', 'plus de 10 ans']):
            return "Expert/Lead (10+ ans)"
        else:
            return "Interm√©diaire (2-5 ans)"
    
    def _detect_industry_sector(self, full_text: str) -> str:
        """D√©tecte le secteur d'activit√©"""
        sectors = {
            'BTP/Construction': ['btp', 'construction', 'b√¢timent', 'travaux publics'],
            'Industrie': ['industrie', 'industriel', 'production', 'manufacturing'],
            'Technologie': ['tech', 'software', 'd√©veloppement', 'informatique'],
            'Finance/Banque': ['banque', 'finance', 'cr√©dit', 'investissement'],
            '√ânergie': ['√©nergie', 'p√©trole', 'gaz', '√©lectricit√©', 'renouvelable'],
            'T√©l√©communications': ['t√©l√©com', 't√©l√©communications', 'r√©seaux', '5g'],
            'A√©ronautique': ['a√©ronautique', 'a√©rospatial', 'aviation', 'a√©rospatial'],
            'Automobile': ['automobile', 'automotive', 'v√©hicule'],
            'Sant√©': ['sant√©', 'm√©dical', 'pharmaceutique', 'h√¥pital']
        }
        
        for sector, keywords in sectors.items():
            if any(keyword in full_text for keyword in keywords):
                return sector
        
        return "Secteur g√©n√©ral"
    
    def _extract_tools_technologies(self, full_text: str) -> List[str]:
        """Extrait les outils et technologies sp√©cifiques mentionn√©s"""
        tools = []
        
        # Outils par domaine
        domain_tools = {
            'CAO/Design': ['autocad', 'solidworks', 'catia', 'inventor', 'fusion 360', 'revit', 'sketchup'],
            'Simulation': ['ansys', 'abaqus', 'comsol', 'matlab', 'simulink'],
            'Programmation': ['python', 'java', 'c++', 'javascript', 'react', 'angular'],
            'Base de donn√©es': ['sql', 'mysql', 'postgresql', 'mongodb', 'oracle'],
            'Cloud': ['aws', 'azure', 'gcp', 'docker', 'kubernetes'],
            'Analyse': ['excel', 'tableau', 'power bi', 'sas', 'spss', 'r'],
            'ERP': ['sap', 'oracle', 'sage', 'odoo']
        }
        
        for category, tool_list in domain_tools.items():
            for tool in tool_list:
                if tool in full_text:
                    tools.append(tool)
        
        return list(set(tools))[:10]  # Limiter √† 10 outils principaux
    
    def _enforce_question_types(self, questions_data: List[Dict], 
                               behavioral_count: int, technical_count: int) -> List[Dict]:
        """Force le respect des types de questions demand√©s"""
        logger.info(f"üîß Enforcement des types: {behavioral_count} comportementales, {technical_count} techniques")
        logger.info(f"üîç Questions re√ßues de l'IA: {[q.get('type', 'UNKNOWN') for q in questions_data]}")
        
        result = []
        
        # FORCER les types selon les compteurs demand√©s
        if behavioral_count > 0:
            # Prendre les N premi√®res questions et les forcer en comportementales
            for i in range(min(behavioral_count, len(questions_data))):
                question = questions_data[i].copy()
                question['type'] = 'comportementale'
                result.append(question)
                logger.info(f"‚úÖ Question {i+1} FORC√âE en comportementale: {question.get('question', 'N/A')[:50]}...")
        
        # FORCER les types techniques
        if technical_count > 0:
            start_idx = behavioral_count
            for i in range(start_idx, min(start_idx + technical_count, len(questions_data))):
                question = questions_data[i].copy()
                question['type'] = 'technique'
                result.append(question)
                logger.info(f"‚úÖ Question {i+1} FORC√âE en technique: {question.get('question', 'N/A')[:50]}...")
        
        logger.info(f"‚úÖ Types FORC√âS: {len(result)} questions finales - Types: {[q.get('type') for q in result]}")
        return result
    
    def _validate_question_relevance(self, questions_data: List[Dict], offer_title: str, keywords: List[str]) -> List[Dict]:
        """Valide que les questions sont sp√©cifiques au poste et non g√©n√©riques"""
        validated_questions = []
        
        # Mots-cl√©s g√©n√©riques √† √©viter
        generic_phrases = [
            'pr√©sentez-vous', 'points forts', 'points faibles', 'motivations',
            'dans 5 ans', 'pourquoi ce poste', 'stress', '√©quipe',
            'd√©fis', 'objectifs', 'ambitions', 'qualit√©s', 'd√©fauts'
        ]
        
        # Mots-cl√©s techniques du poste
        job_keywords = [kw.lower() for kw in keywords[:5]]
        title_words = offer_title.lower().split()
        
        for question_data in questions_data:
            question_text = question_data.get('question', '').lower()
            
            # V√©rifier si la question est g√©n√©rique
            is_generic = any(phrase in question_text for phrase in generic_phrases)
            
            # V√©rifier si la question contient des mots-cl√©s du poste
            has_job_keywords = any(keyword in question_text for keyword in job_keywords)
            has_title_words = any(word in question_text for word in title_words if len(word) > 3)
            
            # Accepter la question si elle n'est pas g√©n√©rique ET contient des mots-cl√©s du poste
            if not is_generic and (has_job_keywords or has_title_words):
                validated_questions.append(question_data)
            else:
                logger.warning(f"‚ùå Question rejet√©e (trop g√©n√©rique): {question_text[:50]}...")
        
        return validated_questions
    
    def _extract_job_keywords(self, title: str, description: str, requirements: str = '') -> List[str]:
        """Extraction intelligente et compl√®te des mots-cl√©s de l'offre d'emploi"""
        import re
        
        # Combinaison titre + description + pr√©requis pour analyse compl√®te
        full_text = f"{title} {description} {requirements}".lower()
        
        # Dictionnaire √©tendu de mots-cl√©s par domaine
        engineering_keywords = [
            # Ing√©nierie Civile/BTP
            'btp', 'construction', 'b√¢timent', 'g√©nie civil', 'travaux publics', 'chantier',
            'b√©ton', 'acier', 'structure', 'fondation', 'voirie', 'assainissement',
            'autocad', 'revit', 'tekla', 'robot structural', 'etabs', 'sap2000',
            'norme marocaine', 'nm', 'eurocode', 'cctp', 'dpgf', 'bpu',
            
            # Ing√©nierie √âlectrique/√âlectronique
            '√©lectrique', '√©lectronique', '√©lectrotechnique', 'automatisme', 'instrumentation',
            'plc', 'scada', 'hmi', 'variateur', 'moteur', 'transformateur', 'disjoncteur',
            'siemens', 'schneider', 'abb', 'allen bradley', 'omron', 'mitsubishi',
            'matlab', 'simulink', 'proteus', 'altium', 'kicad', 'eagle',
            
            # Ing√©nierie M√©canique
            'm√©canique', 'maintenance', 'production', 'usinage', 'fabrication', 'assemblage',
            'cao', 'cfao', 'solidworks', 'catia', 'inventor', 'fusion 360', 'creo',
            'cnc', 'tournage', 'fraisage', 'soudage', 'm√©trologie', 'contr√¥le qualit√©',
            'lean manufacturing', 'tpm', 'gmao', 'amdec', 'smed',
            
            # Ing√©nierie Industrielle
            'g√©nie industriel', 'processus', 'optimisation', 'lean', 'six sigma', 'kaizen',
            'ergonomie', 's√©curit√©', 'qualit√©', 'iso 9001', 'iso 14001', 'ohsas 18001',
            'planification', 'ordonnancement', 'supply chain', 'logistique',
            
            # Ing√©nierie Chimique
            'g√©nie chimique', 'proc√©d√©s', 'chimie', 'p√©trochimie', 'raffinage', 'catalyse',
            'distillation', 'extraction', 'cristallisation', 'r√©acteur', 'colonne',
            'aspen plus', 'hysys', 'chemcad', 'pro ii', 'unisim',
            
            # Ing√©nierie A√©ronautique
            'a√©ronautique', 'a√©rospatial', 'aviation', 'a√©rodynamique', 'spatial',
            'catia v5', 'nx', 'ansys fluent', 'cfd', 'fem', 'easa', 'faa',
            'composite', 'structure a√©ronautique', 'certification',
            
            # Ing√©nierie T√©l√©communications
            't√©l√©communications', 't√©l√©com', 'r√©seaux', '5g', '4g', '3g', 'lte',
            'fibre optique', 'radio', 'antenne', 'gsm', 'umts', 'wifi', 'bluetooth',
            'cisco', 'huawei', 'ericsson', 'nokia', 'juniper',
            
            # Ing√©nierie Environnementale
            'environnement', 'd√©veloppement durable', 'traitement eaux', 'pollution',
            'd√©chets', 'recyclage', '√©nergies renouvelables', '√©olien', 'solaire',
            'impact environnemental', 'iso 14001', 'bilan carbone'
        ]
        
        tech_keywords = [
            # D√©veloppement Web/Mobile
            'python', 'javascript', 'react', 'angular', 'vue', 'node', 'django', 'flask',
            'java', 'spring', 'php', 'laravel', 'symfony', 'ruby', 'rails', 'go', 'rust',
            'html', 'css', 'sass', 'typescript', 'jquery', 'bootstrap', 'tailwind',
            
            # Cybers√©curit√© (AJOUT√â)
            'cybers√©curit√©', 'cyber s√©curit√©', 's√©curit√© informatique', 's√©curit√© r√©seau',
            'pentesting', 'pentest', 'ethical hacking', 'hacking √©thique', 'audit s√©curit√©',
            'vulnerability assessment', 'analyse vuln√©rabilit√©s', 'soc', 'cert', 'csirt',
            'firewall', 'pare-feu', 'ids', 'ips', 'siem', 'soar', 'xdr', 'edr',
            'cryptographie', 'chiffrement', 'ssl', 'tls', 'pki', 'certificats',
            'iso 27001', 'nist', 'owasp', 'cissp', 'ceh', 'oscp', 'sans',
            'malware', 'ransomware', 'phishing', 'social engineering', 'ddos',
            'forensic', 'investigation num√©rique', 'incident response', 'gestion incidents',
            'burp suite', 'metasploit', 'nmap', 'wireshark', 'kali linux', 'nessus',
            'splunk', 'qradar', 'fortinet', 'palo alto', 'checkpoint', 'cisco asa',
            
            # Base de donn√©es
            'sql', 'mysql', 'postgresql', 'mongodb', 'redis', 'elasticsearch',
            
            # Cloud & DevOps
            'aws', 'azure', 'gcp', 'docker', 'kubernetes', 'jenkins', 'gitlab', 'github',
            'terraform', 'ansible', 'linux', 'ubuntu', 'centos',
            
            # Data Engineering & Science (enrichi)
            'data engineer', 'data scientist', 'data science', 'machine learning', 'ml', 'ia artificielle',
            'etl', 'elt', 'data pipeline', 'data warehousing', 'data lake', 'big data',
            'apache spark', 'hadoop', 'kafka', 'airflow', 'luigi', 'dbt',
            'pandas', 'numpy', 'scikit-learn', 'tensorflow', 'pytorch', 'keras',
            'sql', 'nosql', 'databricks', 'snowflake', 'redshift', 'bigquery',
            'tableau', 'power bi', 'looker', 'mlops', 'mlflow'
        ]
        
        economics_keywords = [
            # √âconomie et Finance
            '√©conomie', 'finance', 'banque', 'comptabilit√©', 'audit', 'fiscalit√©',
            'investissement', 'bourse', 'trading', 'risk management', 'cr√©dit',
            'excel', 'sap', 'sage', 'bloomberg', 'reuters', 'matlab', 'r', 'stata',
            
            # Commerce International
            'export', 'import', 'douane', 'incoterms', 'logistique internationale',
            'change', 'devise', 'lettre de cr√©dit', 'amdp', 'portnet',
            
            # D√©veloppement √âconomique
            'd√©veloppement', 'coop√©ration', 'ong', 'projets sociaux', 'microfinance',
            '√©valuation impact', 'indicateurs d√©veloppement', 'pnud', 'banque mondiale'
        ]
        
        business_keywords = [
            'gestion', 'management', '√©quipe', 'projet', 'client', 'commercial', 'vente',
            'marketing', 'communication', 'design', 'ux', 'ui', 'cr√©ativit√©', 'innovation',
            'startup', 'entreprise', 'pme', 'grand groupe', 'international', 'remote',
            't√©l√©travail', 'hybride', 'autonomie', 'leadership', 'collaboration'
        ]
        
        # Combinaison de tous les mots-cl√©s
        all_keywords = engineering_keywords + tech_keywords + economics_keywords + business_keywords
        
        found_keywords = []
        keyword_scores = {}
        
        # Recherche avec scoring bas√© sur la fr√©quence et la position
        for keyword in all_keywords:
            if keyword in full_text:
                # Score bas√© sur la fr√©quence d'apparition
                frequency = full_text.count(keyword)
                
                # Bonus si le mot-cl√© appara√Æt dans le titre (plus important)
                title_bonus = 2 if keyword in title.lower() else 1
                
                # Bonus si le mot-cl√© appara√Æt dans les pr√©requis (tr√®s important)
                req_bonus = 1.5 if requirements and keyword in requirements.lower() else 1
                
                # Score final
                score = frequency * title_bonus * req_bonus
                keyword_scores[keyword] = score
                found_keywords.append(keyword)
        
        # Extraction de mots-cl√©s suppl√©mentaires par regex
        # Technologies en majuscules, acronymes, noms propres
        tech_pattern = r'\b[A-Z]{2,}\b|"([^"]+)"|\'([^\']+)\''
        additional_matches = re.findall(tech_pattern, full_text.upper())
        
        for match in additional_matches:
            if isinstance(match, tuple):
                for submatch in match:
                    if submatch and len(submatch.strip()) > 1:
                        clean_match = submatch.strip().lower()
                        if clean_match not in found_keywords and len(clean_match) > 2:
                            found_keywords.append(clean_match)
                            keyword_scores[clean_match] = 1
            else:
                if len(match) > 2 and match.lower() not in found_keywords:
                    found_keywords.append(match.lower())
                    keyword_scores[match.lower()] = 1
        
        # Extraction de phrases importantes (comp√©tences sp√©cifiques)
        skill_patterns = [
            r'exp√©rience en ([^,.]+)',
            r'ma√Ætrise de ([^,.]+)',
            r'connaissance de ([^,.]+)',
            r'comp√©tence en ([^,.]+)',
            r'expertise en ([^,.]+)'
        ]
        
        for pattern in skill_patterns:
            matches = re.findall(pattern, full_text, re.IGNORECASE)
            for match in matches:
                clean_skill = match.strip().lower()
                if len(clean_skill) > 3 and clean_skill not in found_keywords:
                    found_keywords.append(clean_skill)
                    keyword_scores[clean_skill] = 2  # Bonus pour les comp√©tences explicites
        
        # Trier par score d√©croissant et limiter aux 15 mots-cl√©s les plus pertinents
        sorted_keywords = sorted(found_keywords, key=lambda k: keyword_scores.get(k, 0), reverse=True)
        
        return list(dict.fromkeys(sorted_keywords))[:15]  # Supprime les doublons tout en gardant l'ordre
    
    def _get_fallback_questions(self, num_questions: int = 5, offer_title: str = '', requirements: str = '', behavioral_count: int = None, technical_count: int = None) -> List[Dict[str, Any]]:
        """Questions de fallback intelligentes pour tous les secteurs d'emploi au Maroc"""
        
        # Questions Ing√©nierie Civile
        civil_engineering_questions = [
            {
                "question": "D√©crivez votre approche pour la conception d'un projet de construction en tenant compte des normes marocaines.",
                "type": "technique",
                "expected_duration": 300,
                "difficulty_level": "hard",
                "skills_assessed": ["conception", "normes_marocaines", "construction"],
                "order": 1
            },
            {
                "question": "Comment √©valuez-vous la r√©sistance des mat√©riaux dans un environnement climatique marocain ?",
                "type": "technique",
                "expected_duration": 240,
                "difficulty_level": "medium",
                "skills_assessed": ["mat√©riaux", "climat", "r√©sistance"],
                "order": 2
            },
            {
                "question": "Expliquez votre m√©thode de gestion de projet pour un chantier de grande envergure.",
                "type": "technique",
                "expected_duration": 180,
                "difficulty_level": "medium",
                "skills_assessed": ["gestion_projet", "chantier", "planification"],
                "order": 3
            }
        ]
        
        # Questions Ing√©nierie √âlectrique/√âlectronique
        electrical_engineering_questions = [
            {
                "question": "Comment concevez-vous un syst√®me √©lectrique pour un b√¢timent industriel en respectant les normes NM ?",
                "type": "technique",
                "expected_duration": 300,
                "difficulty_level": "hard",
                "skills_assessed": ["conception_√©lectrique", "normes_NM", "industriel"],
                "order": 1
            },
            {
                "question": "D√©crivez votre approche pour l'optimisation √©nerg√©tique dans les installations √©lectriques.",
                "type": "technique",
                "expected_duration": 240,
                "difficulty_level": "medium",
                "skills_assessed": ["efficacit√©_√©nerg√©tique", "optimisation", "installations"],
                "order": 2
            },
            {
                "question": "Comment diagnostiquez-vous et r√©solvez-vous les pannes dans les syst√®mes √©lectroniques complexes ?",
                "type": "technique",
                "expected_duration": 180,
                "difficulty_level": "medium",
                "skills_assessed": ["diagnostic", "d√©pannage", "√©lectronique"],
                "order": 3
            }
        ]
        
        # Questions Ing√©nierie M√©canique
        mechanical_engineering_questions = [
            {
                "question": "Expliquez votre processus de conception d'une pi√®ce m√©canique depuis le cahier des charges jusqu'√† la production.",
                "type": "technique",
                "expected_duration": 300,
                "difficulty_level": "hard",
                "skills_assessed": ["conception_m√©canique", "CAO", "production"],
                "order": 1
            },
            {
                "question": "Comment optimisez-vous les performances d'un syst√®me m√©canique en termes de rendement et durabilit√© ?",
                "type": "technique",
                "expected_duration": 240,
                "difficulty_level": "medium",
                "skills_assessed": ["optimisation", "rendement", "durabilit√©"],
                "order": 2
            },
            {
                "question": "D√©crivez votre approche pour la maintenance pr√©ventive des √©quipements industriels.",
                "type": "technique",
                "expected_duration": 180,
                "difficulty_level": "medium",
                "skills_assessed": ["maintenance", "pr√©ventif", "industriel"],
                "order": 3
            }
        ]
        
        # Questions Ing√©nierie Industrielle
        industrial_engineering_questions = [
            {
                "question": "Comment optimisez-vous les processus de production pour am√©liorer l'efficacit√© et r√©duire les co√ªts ?",
                "type": "technique",
                "expected_duration": 300,
                "difficulty_level": "hard",
                "skills_assessed": ["optimisation_processus", "lean_manufacturing", "co√ªts"],
                "order": 1
            },
            {
                "question": "D√©crivez votre approche pour impl√©menter la m√©thode Lean Six Sigma dans une cha√Æne de production.",
                "type": "technique",
                "expected_duration": 240,
                "difficulty_level": "medium",
                "skills_assessed": ["lean_six_sigma", "am√©lioration_continue", "qualit√©"],
                "order": 2
            },
            {
                "question": "Comment analysez-vous et am√©liorez-vous l'ergonomie des postes de travail ?",
                "type": "technique",
                "expected_duration": 180,
                "difficulty_level": "medium",
                "skills_assessed": ["ergonomie", "s√©curit√©", "productivit√©"],
                "order": 3
            }
        ]
        
        # Questions Data Science / Data Engineer (AJOUT√â)
        data_science_questions = [
            {
                "question": "Comment concevez-vous un pipeline de donn√©es (ETL/ELT) scalable pour traiter des t√©raoctets de donn√©es ?",
                "type": "technique",
                "expected_duration": 300,
                "difficulty_level": "hard",
                "skills_assessed": ["data_pipeline", "etl", "scalability", "big_data"],
                "order": 1
            },
            {
                "question": "D√©crivez votre exp√©rience avec des outils comme Apache Spark ou Hadoop pour le traitement de donn√©es distribu√©es.",
                "type": "technique",
                "expected_duration": 240,
                "difficulty_level": "medium",
                "skills_assessed": ["spark", "hadoop", "distributed_computing"],
                "order": 2
            },
            {
                "question": "Comment assurez-vous la qualit√© et la gouvernance des donn√©es dans un data lake ?",
                "type": "technique",
                "expected_duration": 180,
                "difficulty_level": "medium",
                "skills_assessed": ["data_quality", "data_governance", "data_lake"],
                "order": 3
            }
        ]

        # Questions Cybers√©curit√© (AJOUT√â)
        cybersecurity_questions = [
            {
                "question": "Comment r√©alisez-vous un audit de s√©curit√© complet d'une infrastructure r√©seau d'entreprise ?",
                "type": "technique",
                "expected_duration": 300,
                "difficulty_level": "hard",
                "skills_assessed": ["audit_s√©curit√©", "infrastructure_r√©seau", "analyse_vuln√©rabilit√©s"],
                "order": 1
            },
            {
                "question": "D√©crivez votre processus pour effectuer un test de p√©n√©tration web avec Burp Suite.",
                "type": "technique",
                "expected_duration": 240,
                "difficulty_level": "medium",
                "skills_assessed": ["pentest", "burp_suite", "s√©curit√©_web"],
                "order": 2
            },
            {
                "question": "Comment g√©rez-vous un incident de s√©curit√© depuis la d√©tection jusqu'√† la r√©solution ?",
                "type": "technique",
                "expected_duration": 180,
                "difficulty_level": "medium",
                "skills_assessed": ["gestion_incidents", "forensic", "response_plan"],
                "order": 3
            },
            {
                "question": "Expliquez votre approche pour s√©curiser une architecture cloud selon les standards ISO 27001.",
                "type": "technique",
                "expected_duration": 240,
                "difficulty_level": "hard",
                "skills_assessed": ["s√©curit√©_cloud", "iso_27001", "compliance"],
                "order": 4
            },
            {
                "question": "Comment analysez-vous et pr√©venez-vous les attaques par d√©ni de service (DDoS) ?",
                "type": "technique",
                "expected_duration": 180,
                "difficulty_level": "medium",
                "skills_assessed": ["ddos_protection", "analyse_trafic", "mitigation"],
                "order": 5
            }
        ]
        
        # Questions Ing√©nierie Informatique/Logiciel
        software_engineering_questions = [
            {
                "question": "Expliquez votre approche pour concevoir une architecture logicielle scalable et maintenable.",
                "type": "technique",
                "expected_duration": 300,
                "difficulty_level": "hard",
                "skills_assessed": ["architecture_logicielle", "scalabilit√©", "maintenabilit√©"],
                "order": 1
            },
            {
                "question": "Comment impl√©mentez-vous les principes DevOps dans le cycle de d√©veloppement logiciel ?",
                "type": "technique",
                "expected_duration": 240,
                "difficulty_level": "medium",
                "skills_assessed": ["devops", "CI_CD", "automatisation"],
                "order": 2
            },
            {
                "question": "D√©crivez votre m√©thode pour assurer la qualit√© du code et r√©duire les bugs en production.",
                "type": "technique",
                "expected_duration": 180,
                "difficulty_level": "medium",
                "skills_assessed": ["qualit√©_code", "tests", "debugging"],
                "order": 3
            }
        ]
        
        # Questions Ing√©nierie Chimique
        chemical_engineering_questions = [
            {
                "question": "Comment concevez-vous un proc√©d√© chimique en tenant compte de la s√©curit√© et de l'environnement ?",
                "type": "technique",
                "expected_duration": 300,
                "difficulty_level": "hard",
                "skills_assessed": ["proc√©d√©s_chimiques", "s√©curit√©", "environnement"],
                "order": 1
            },
            {
                "question": "Expliquez votre approche pour optimiser le rendement d'une r√©action chimique industrielle.",
                "type": "technique",
                "expected_duration": 240,
                "difficulty_level": "medium",
                "skills_assessed": ["optimisation_r√©action", "rendement", "catalyse"],
                "order": 2
            },
            {
                "question": "Comment g√©rez-vous le contr√¥le qualit√© dans une unit√© de production chimique ?",
                "type": "technique",
                "expected_duration": 180,
                "difficulty_level": "medium",
                "skills_assessed": ["contr√¥le_qualit√©", "analyse", "normes"],
                "order": 3
            }
        ]
        
        # Questions Ing√©nierie A√©ronautique/A√©rospatiale
        aerospace_engineering_questions = [
            {
                "question": "D√©crivez votre processus de conception et validation d'un composant a√©ronautique critique.",
                "type": "technique",
                "expected_duration": 300,
                "difficulty_level": "hard",
                "skills_assessed": ["conception_a√©ronautique", "validation", "s√©curit√©"],
                "order": 1
            },
            {
                "question": "Comment analysez-vous les contraintes a√©rodynamiques dans la conception d'un a√©ronef ?",
                "type": "technique",
                "expected_duration": 240,
                "difficulty_level": "medium",
                "skills_assessed": ["a√©rodynamique", "simulation", "CFD"],
                "order": 2
            },
            {
                "question": "Expliquez votre approche pour respecter les normes de certification a√©ronautique (EASA, FAA).",
                "type": "technique",
                "expected_duration": 180,
                "difficulty_level": "medium",
                "skills_assessed": ["certification", "normes_a√©ronautiques", "conformit√©"],
                "order": 3
            }
        ]
        
        # Questions Ing√©nierie des T√©l√©communications
        telecom_engineering_questions = [
            {
                "question": "Comment concevez-vous un r√©seau de t√©l√©communications pour optimiser la couverture et la qualit√© ?",
                "type": "technique",
                "expected_duration": 300,
                "difficulty_level": "hard",
                "skills_assessed": ["r√©seaux_t√©l√©com", "couverture", "optimisation"],
                "order": 1
            },
            {
                "question": "Expliquez votre approche pour d√©ployer la 5G en tenant compte des contraintes techniques et r√©glementaires.",
                "type": "technique",
                "expected_duration": 240,
                "difficulty_level": "medium",
                "skills_assessed": ["5G", "d√©ploiement", "r√©glementation"],
                "order": 2
            },
            {
                "question": "Comment diagnostiquez-vous et r√©solvez-vous les probl√®mes de qualit√© de signal ?",
                "type": "technique",
                "expected_duration": 180,
                "difficulty_level": "medium",
                "skills_assessed": ["diagnostic", "qualit√©_signal", "troubleshooting"],
                "order": 3
            }
        ]
        
        # Questions Ing√©nierie Environnementale
        environmental_engineering_questions = [
            {
                "question": "Comment concevez-vous un syst√®me de traitement des eaux us√©es respectueux de l'environnement ?",
                "type": "technique",
                "expected_duration": 300,
                "difficulty_level": "hard",
                "skills_assessed": ["traitement_eaux", "environnement", "durabilit√©"],
                "order": 1
            },
            {
                "question": "D√©crivez votre approche pour √©valuer l'impact environnemental d'un projet industriel.",
                "type": "technique",
                "expected_duration": 240,
                "difficulty_level": "medium",
                "skills_assessed": ["impact_environnemental", "√©valuation", "normes_ISO"],
                "order": 2
            },
            {
                "question": "Comment d√©veloppez-vous des solutions pour r√©duire l'empreinte carbone d'une entreprise ?",
                "type": "technique",
                "expected_duration": 180,
                "difficulty_level": "medium",
                "skills_assessed": ["empreinte_carbone", "solutions_vertes", "d√©veloppement_durable"],
                "order": 3
            }
        ]
        
        # Questions √âconomie et Finance
        economics_finance_questions = [
            {
                "question": "Analysez l'impact des politiques √©conomiques marocaines actuelles sur le secteur priv√©.",
                "type": "technique",
                "expected_duration": 300,
                "difficulty_level": "hard",
                "skills_assessed": ["analyse_√©conomique", "politiques_publiques", "secteur_priv√©"],
                "order": 1
            },
            {
                "question": "Comment √©valuez-vous la rentabilit√© d'un investissement dans le contexte √©conomique marocain ?",
                "type": "technique",
                "expected_duration": 240,
                "difficulty_level": "medium",
                "skills_assessed": ["analyse_financi√®re", "investissement", "rentabilit√©"],
                "order": 2
            },
            {
                "question": "D√©crivez votre approche pour la gestion des risques financiers dans une entreprise.",
                "type": "technique",
                "expected_duration": 180,
                "difficulty_level": "medium",
                "skills_assessed": ["gestion_risques", "finance", "entreprise"],
                "order": 3
            },
            {
                "question": "Expliquez les m√©canismes de financement disponibles pour les PME au Maroc.",
                "type": "technique",
                "expected_duration": 180,
                "difficulty_level": "medium",
                "skills_assessed": ["financement", "PME", "march√©_marocain"],
                "order": 4
            }
        ]
        
        # Questions √âconomie Internationale et Commerce
        international_economics_questions = [
            {
                "question": "Analysez l'impact des accords de libre-√©change du Maroc sur l'√©conomie nationale.",
                "type": "technique",
                "expected_duration": 300,
                "difficulty_level": "hard",
                "skills_assessed": ["commerce_international", "accords_commerciaux", "√©conomie_marocaine"],
                "order": 1
            },
            {
                "question": "Comment √©valuez-vous les opportunit√©s d'exportation pour une entreprise marocaine ?",
                "type": "technique",
                "expected_duration": 240,
                "difficulty_level": "medium",
                "skills_assessed": ["export", "√©tude_march√©", "strat√©gie_internationale"],
                "order": 2
            },
            {
                "question": "D√©crivez votre approche pour analyser les fluctuations des taux de change et leur impact.",
                "type": "technique",
                "expected_duration": 180,
                "difficulty_level": "medium",
                "skills_assessed": ["taux_change", "analyse_financi√®re", "risque_devise"],
                "order": 3
            }
        ]
        
        # Questions √âconomie du D√©veloppement
        development_economics_questions = [
            {
                "question": "Comment analysez-vous l'efficacit√© des programmes de d√©veloppement √©conomique r√©gional ?",
                "type": "technique",
                "expected_duration": 300,
                "difficulty_level": "hard",
                "skills_assessed": ["d√©veloppement_r√©gional", "√©valuation_programmes", "impact_√©conomique"],
                "order": 1
            },
            {
                "question": "Expliquez votre m√©thode pour mesurer l'impact social d'un projet √©conomique.",
                "type": "technique",
                "expected_duration": 240,
                "difficulty_level": "medium",
                "skills_assessed": ["impact_social", "√©valuation", "d√©veloppement_durable"],
                "order": 2
            },
            {
                "question": "Comment identifiez-vous les facteurs de croissance √©conomique dans les pays √©mergents ?",
                "type": "technique",
                "expected_duration": 180,
                "difficulty_level": "medium",
                "skills_assessed": ["croissance_√©conomique", "pays_√©mergents", "facteurs_d√©veloppement"],
                "order": 3
            }
        ]
        
        # Questions √âconom√©trie et Analyse Quantitative
        econometrics_questions = [
            {
                "question": "D√©crivez votre approche pour construire un mod√®le √©conom√©trique robuste.",
                "type": "technique",
                "expected_duration": 300,
                "difficulty_level": "hard",
                "skills_assessed": ["√©conom√©trie", "mod√©lisation", "statistiques"],
                "order": 1
            },
            {
                "question": "Comment validez-vous la fiabilit√© de vos pr√©visions √©conomiques ?",
                "type": "technique",
                "expected_duration": 240,
                "difficulty_level": "medium",
                "skills_assessed": ["pr√©visions", "validation_mod√®le", "tests_statistiques"],
                "order": 2
            },
            {
                "question": "Expliquez votre m√©thode pour analyser les s√©ries temporelles √©conomiques.",
                "type": "technique",
                "expected_duration": 180,
                "difficulty_level": "medium",
                "skills_assessed": ["s√©ries_temporelles", "analyse_tendances", "saisonnalit√©"],
                "order": 3
            }
        ]
        
        # Questions Enseignement et √âducation
        education_questions = [
            {
                "question": "Comment adaptez-vous vos m√©thodes p√©dagogiques aux diff√©rents profils d'apprenants ?",
                "type": "technique",
                "expected_duration": 240,
                "difficulty_level": "medium",
                "skills_assessed": ["p√©dagogie", "adaptation", "diff√©renciation"],
                "order": 1
            },
            {
                "question": "D√©crivez votre approche pour √©valuer les progr√®s des √©tudiants de mani√®re √©quitable.",
                "type": "technique",
                "expected_duration": 180,
                "difficulty_level": "medium",
                "skills_assessed": ["√©valuation", "√©quit√©", "progr√®s"],
                "order": 2
            },
            {
                "question": "Comment int√©grez-vous les technologies num√©riques dans votre enseignement ?",
                "type": "technique",
                "expected_duration": 180,
                "difficulty_level": "medium",
                "skills_assessed": ["num√©rique", "innovation_p√©dagogique", "technologie"],
                "order": 3
            },
            {
                "question": "Expliquez votre m√©thode pour g√©rer une classe difficile et maintenir un environnement d'apprentissage positif.",
                "type": "comportementale",
                "expected_duration": 180,
                "difficulty_level": "medium",
                "skills_assessed": ["gestion_classe", "autorit√©", "environnement_positif"],
                "order": 4
            }
        ]
        
        # Questions MLOps et Data Science
        mlops_questions = [
            {
                "question": "Comment structureriez-vous un pipeline MLOps complet pour d√©ployer un mod√®le de machine learning en production ?",
                "type": "technique",
                "expected_duration": 300,
                "difficulty_level": "hard",
                "skills_assessed": ["mlops", "architecture", "d√©ploiement"],
                "order": 1
            },
            {
                "question": "D√©crivez votre approche pour monitorer la d√©rive des donn√©es (data drift) et la performance d'un mod√®le en production.",
                "type": "technique",
                "expected_duration": 240,
                "difficulty_level": "hard",
                "skills_assessed": ["monitoring", "data_drift", "mlops"],
                "order": 2
            },
            {
                "question": "Comment g√©rez-vous le versioning des mod√®les ML et des datasets dans vos projets ?",
                "type": "technique",
                "expected_duration": 180,
                "difficulty_level": "medium",
                "skills_assessed": ["versioning", "mlflow", "git"],
                "order": 3
            }
        ]
        
        # Questions D√©veloppement Logiciel
        dev_questions = [
            {
                "question": "D√©crivez votre approche pour optimiser les performances d'une application web avec une forte charge utilisateur.",
                "type": "technique",
                "expected_duration": 240,
                "difficulty_level": "hard",
                "skills_assessed": ["performance", "scalabilit√©", "architecture"],
                "order": 1
            },
            {
                "question": "Comment impl√©mentez-vous la s√©curit√© dans vos applications (authentification, autorisation, protection des donn√©es) ?",
                "type": "technique",
                "expected_duration": 300,
                "difficulty_level": "medium",
                "skills_assessed": ["s√©curit√©", "authentification", "protection_donn√©es"],
                "order": 2
            },
            {
                "question": "Expliquez votre processus de d√©bogage pour identifier et r√©soudre un bug complexe en production.",
                "type": "technique",
                "expected_duration": 180,
                "difficulty_level": "medium",
                "skills_assessed": ["d√©bogage", "troubleshooting", "production"],
                "order": 3
            }
        ]
        
        # Questions Marketing et Communication
        marketing_questions = [
            {
                "question": "Comment d√©veloppez-vous une strat√©gie marketing adapt√©e au march√© marocain ?",
                "type": "technique",
                "expected_duration": 240,
                "difficulty_level": "medium",
                "skills_assessed": ["strat√©gie_marketing", "march√©_local", "adaptation"],
                "order": 1
            },
            {
                "question": "D√©crivez votre approche pour mesurer l'efficacit√© d'une campagne publicitaire.",
                "type": "technique",
                "expected_duration": 180,
                "difficulty_level": "medium",
                "skills_assessed": ["mesure_performance", "ROI", "analytics"],
                "order": 2
            },
            {
                "question": "Comment g√©rez-vous la communication de crise sur les r√©seaux sociaux ?",
                "type": "technique",
                "expected_duration": 180,
                "difficulty_level": "medium",
                "skills_assessed": ["communication_crise", "r√©seaux_sociaux", "gestion_r√©putation"],
                "order": 3
            }
        ]
        
        # Questions Ressources Humaines
        hr_questions = [
            {
                "question": "Comment menez-vous un processus de recrutement √©quitable et efficace ?",
                "type": "technique",
                "expected_duration": 240,
                "difficulty_level": "medium",
                "skills_assessed": ["recrutement", "√©quit√©", "processus"],
                "order": 1
            },
            {
                "question": "D√©crivez votre approche pour g√©rer un conflit entre employ√©s.",
                "type": "comportementale",
                "expected_duration": 180,
                "difficulty_level": "medium",
                "skills_assessed": ["gestion_conflits", "m√©diation", "relations_humaines"],
                "order": 2
            },
            {
                "question": "Comment d√©veloppez-vous un plan de formation pour les employ√©s ?",
                "type": "technique",
                "expected_duration": 180,
                "difficulty_level": "medium",
                "skills_assessed": ["formation", "d√©veloppement", "planification"],
                "order": 3
            }
        ]
        
        # Questions g√©n√©riques professionnelles
        generic_questions = [
            {
                "question": "D√©crivez un projet professionnel dont vous √™tes particuli√®rement fier et expliquez votre r√¥le.",
                "type": "comportementale",
                "expected_duration": 180,
                "difficulty_level": "medium",
                "skills_assessed": ["communication", "accomplissement"],
                "order": 1
            },
            {
                "question": "Comment g√©rez-vous les priorit√©s lorsque vous avez plusieurs t√¢ches urgentes √† accomplir ?",
                "type": "comportementale",
                "expected_duration": 120,
                "difficulty_level": "medium",
                "skills_assessed": ["gestion_temps", "priorisation"],
                "order": 2
            },
            {
                "question": "D√©crivez une situation o√π vous avez d√ª apprendre rapidement une nouvelle technologie ou comp√©tence.",
                "type": "comportementale",
                "expected_duration": 150,
                "difficulty_level": "medium",
                "skills_assessed": ["apprentissage", "adaptabilit√©"],
                "order": 3
            },
            {
                "question": "Comment travaillez-vous en √©quipe et comment g√©rez-vous les conflits ou d√©saccords ?",
                "type": "comportementale",
                "expected_duration": 150,
                "difficulty_level": "medium",
                "skills_assessed": ["travail_√©quipe", "communication"],
                "order": 4
            },
            {
                "question": "Quels sont vos objectifs de carri√®re √† court et long terme ?",
                "type": "comportementale",
                "expected_duration": 120,
                "difficulty_level": "easy",
                "skills_assessed": ["motivation", "vision"],
                "order": 5
            }
        ]
        
        # S√©lection intelligente des questions selon le type de poste
        title_lower = offer_title.lower() if offer_title else ""
        requirements_lower = requirements.lower() if requirements else ""
        combined_text = f"{title_lower} {requirements_lower}"
        
        # D√©tection du secteur d'emploi - CYBERS√âCURIT√â EN PREMIER
        if any(keyword in combined_text for keyword in ['cybers√©curit√©', 'cyber s√©curit√©', 's√©curit√© informatique', 'security', 'pentest', 'audit s√©curit√©', 'ethical hacker', 'pentester']):
            selected_questions = cybersecurity_questions + generic_questions[:1]
            sector = "Cybers√©curit√©"
        elif any(keyword in combined_text for keyword in ['ing√©nieur civil', 'g√©nie civil', 'btp', 'construction', 'b√¢timent', 'travaux publics']):
            selected_questions = civil_engineering_questions + generic_questions[:2]
            sector = "Ing√©nierie Civile"
        elif any(keyword in combined_text for keyword in ['ing√©nieur √©lectrique', '√©lectricien', '√©lectronique', '√©lectrotechnique', 'automatisme', 'instrumentation']):
            selected_questions = electrical_engineering_questions + generic_questions[:2]
            sector = "Ing√©nierie √âlectrique"
        elif any(keyword in combined_text for keyword in ['ing√©nieur m√©canique', 'm√©canique', 'maintenance', 'production', 'usinage', 'fabrication']):
            selected_questions = mechanical_engineering_questions + generic_questions[:2]
            sector = "Ing√©nierie M√©canique"
        elif any(keyword in combined_text for keyword in ['ing√©nieur industriel', 'g√©nie industriel', 'lean', 'six sigma', 'processus', 'optimisation', 'qualit√©']):
            selected_questions = industrial_engineering_questions + generic_questions[:2]
            sector = "Ing√©nierie Industrielle"
        elif any(keyword in combined_text for keyword in ['data engineer', 'data scientist', 'data science', 'machine learning', 'big data', 'etl']):
            selected_questions = data_science_questions + generic_questions[:1]
            sector = "Data Science / Engineering"
        elif any(keyword in combined_text for keyword in ['ing√©nieur logiciel', 'g√©nie logiciel', 'software engineer', 'architecture logicielle', 'devops']):
            selected_questions = software_engineering_questions + generic_questions[:2]
            sector = "Ing√©nierie Logiciel"
        elif any(keyword in combined_text for keyword in ['ing√©nieur chimique', 'g√©nie chimique', 'proc√©d√©s', 'chimie', 'p√©trochimie', 'raffinage']):
            selected_questions = chemical_engineering_questions + generic_questions[:2]
            sector = "Ing√©nierie Chimique"
        elif any(keyword in combined_text for keyword in ['ing√©nieur a√©ronautique', 'a√©rospatial', 'aviation', 'a√©rodynamique', 'spatial']):
            selected_questions = aerospace_engineering_questions + generic_questions[:2]
            sector = "Ing√©nierie A√©ronautique"
        elif any(keyword in combined_text for keyword in ['ing√©nieur t√©l√©communications', 't√©l√©com', 'r√©seaux', '5g', '4g', 'fibre optique', 'radio']):
            selected_questions = telecom_engineering_questions + generic_questions[:2]
            sector = "Ing√©nierie T√©l√©communications"
        elif any(keyword in combined_text for keyword in ['ing√©nieur environnemental', 'environnement', 'd√©veloppement durable', 'traitement eaux', 'pollution']):
            selected_questions = environmental_engineering_questions + generic_questions[:2]
            sector = "Ing√©nierie Environnementale"
        # TOUTES LES SP√âCIALISATIONS √âCONOMIQUES
        elif any(keyword in combined_text for keyword in ['√©conomiste', '√©conomie', 'finance', 'banque', 'comptabilit√©', 'audit', 'gestion financi√®re']):
            selected_questions = economics_finance_questions + generic_questions[:1]
            sector = "√âconomie et Finance"
        elif any(keyword in combined_text for keyword in ['commerce international', 'export', 'import', 'douane', 'logistique internationale']):
            selected_questions = international_economics_questions + generic_questions[:1]
            sector = "√âconomie Internationale"
        elif any(keyword in combined_text for keyword in ['d√©veloppement √©conomique', 'coop√©ration', 'ong', 'd√©veloppement durable', 'projets sociaux']):
            selected_questions = development_economics_questions + generic_questions[:1]
            sector = "√âconomie du D√©veloppement"
        elif any(keyword in combined_text for keyword in ['√©conom√©trie', 'statistiques', 'analyse quantitative', 'mod√©lisation', 'pr√©visions']):
            selected_questions = econometrics_questions + generic_questions[:1]
            sector = "√âconom√©trie"
        elif any(keyword in combined_text for keyword in ['enseignant', 'professeur', '√©ducation', 'formation', 'p√©dagogie']):
            selected_questions = education_questions + generic_questions[:1]
            sector = "Enseignement et √âducation"
        elif any(keyword in combined_text for keyword in ['mlops', 'ml ops', 'machine learning', 'data scientist', 'ia']):
            selected_questions = mlops_questions + generic_questions[:2]
            sector = "MLOps et Data Science"
        elif any(keyword in combined_text for keyword in ['d√©veloppeur', 'developer', 'dev', 'programmeur', 'logiciel']):
            selected_questions = dev_questions + generic_questions[:2]
            sector = "D√©veloppement Logiciel"
        elif any(keyword in combined_text for keyword in ['marketing', 'communication', 'publicit√©', 'commercial']):
            selected_questions = marketing_questions + generic_questions[:2]
            sector = "Marketing et Communication"
        elif any(keyword in combined_text for keyword in ['rh', 'ressources humaines', 'recrutement', 'hr']):
            selected_questions = hr_questions + generic_questions[:2]
            sector = "Ressources Humaines"
        else:
            selected_questions = generic_questions
            sector = "G√©n√©raliste"
        
        # Ordonnancement intelligent des questions
        final_questions = self._order_questions_intelligently(selected_questions, num_questions, sector, behavioral_count, technical_count)
        
        # Ajouter les m√©tadonn√©es de fallback
        for i, question in enumerate(final_questions):
            question.update({
                "generated_by": "intelligent_fallback",
                "offer_title": offer_title or "Poste g√©n√©rique",
                "sector": sector,
                "order": i + 1
            })
        
        logger.info(f"üéØ Utilisation des questions {sector} pour {offer_title}")
        logger.info(f"üîÑ Utilisation de {len(final_questions)} questions ordonn√©es intelligemment")
        return final_questions
    
    def _order_questions_intelligently(self, questions: List[Dict], num_questions: int, sector: str, 
                                      behavioral_count: int = None, technical_count: int = None) -> List[Dict[str, Any]]:
        """Ordonne les questions de mani√®re intelligente selon le secteur et la progression"""
        
        if not questions or num_questions <= 0:
            return []
        
        # S√©parer les questions par type
        technical_questions = [q for q in questions if q.get('type') == 'technique']
        behavioral_questions = [q for q in questions if q.get('type') == 'comportementale']
        situational_questions = [q for q in questions if q.get('type') == 'situationnelle']
        
        # S√©parer par difficult√©
        easy_questions = [q for q in questions if q.get('difficulty_level') == 'easy']
        medium_questions = [q for q in questions if q.get('difficulty_level') == 'medium']
        hard_questions = [q for q in questions if q.get('difficulty_level') == 'hard']
        
        ordered_questions = []
        
        # Utiliser les ratios sp√©cifi√©s par l'utilisateur si fournis
        if behavioral_count is not None and technical_count is not None:
            target_behavioral = min(behavioral_count, len(behavioral_questions))
            target_technical = min(technical_count, len(technical_questions))
            
            # S√©lectionner les questions selon les ratios demand√©s
            selected_behavioral = behavioral_questions[:target_behavioral]
            selected_technical = technical_questions[:target_technical]
            
            # Alterner intelligemment les questions
            ordered_questions = []
            max_questions = max(len(selected_behavioral), len(selected_technical))
            
            for i in range(max_questions):
                # Commencer par comportementale pour mettre en confiance
                if i < len(selected_behavioral):
                    ordered_questions.append(selected_behavioral[i])
                if i < len(selected_technical):
                    ordered_questions.append(selected_technical[i])
            
            # Limiter au nombre total demand√©
            final_ordered = ordered_questions[:num_questions]
            
            logger.info(f"üìä Ratio personnalis√©: {len([q for q in final_ordered if q.get('type') == 'comportementale'])} comportementales, {len([q for q in final_ordered if q.get('type') == 'technique'])} techniques")
            
        else:
            # Construire la liste finale des questions
            final_questions = [mandatory_question]
                
                # 2. Technique medium (√©valuation des comp√©tences de base)
                medium_technical = [q for q in technical_questions if q.get('difficulty_level') == 'medium']
                if medium_technical:
                    ordered_questions.append(medium_technical[0])
                elif technical_questions:
                    ordered_questions.append(technical_questions[0])
                
                # 3. Comportementale medium (exp√©rience)
                medium_behavioral = [q for q in behavioral_questions if q.get('difficulty_level') == 'medium']
                if medium_behavioral and len(behavioral_questions) > 1:
                    ordered_questions.append(medium_behavioral[0])
                elif len(behavioral_questions) > 1:
                    ordered_questions.append(behavioral_questions[1])
                
                # 4. Technique hard (expertise)
                hard_technical = [q for q in technical_questions if q.get('difficulty_level') == 'hard']
                if hard_technical and len(technical_questions) > 1:
                    ordered_questions.append(hard_technical[0])
                elif len(technical_questions) > 1:
                    ordered_questions.append(technical_questions[1])
                
                # 5. Question finale (selon le secteur)
                if sector in ["MLOps et Data Science", "D√©veloppement Logiciel"]:
                    # Pour les postes tech : finir par une question technique avanc√©e
                    remaining_technical = [q for q in technical_questions if q not in ordered_questions]
                    if remaining_technical:
                        ordered_questions.append(remaining_technical[0])
                else:
                    # Pour les autres secteurs : finir par une question comportementale
                # Alterner technique/comportementale pour le reste
                remaining_technical = [q for q in remaining_questions if q.get('type') == 'technique']
                remaining_behavioral = [q for q in remaining_questions if q.get('type') == 'comportementale']
                
                for i in range(remaining_count):
                    if i % 2 == 0 and remaining_technical:
                        ordered_questions.append(remaining_technical.pop(0))
                    elif remaining_behavioral:
                        ordered_questions.append(remaining_behavioral.pop(0))
                    elif remaining_technical:
                        ordered_questions.append(remaining_technical.pop(0))
            
            # Compl√©ter si n√©cessaire avec les questions restantes
            if len(ordered_questions) < num_questions:
                remaining = [q for q in questions if q not in ordered_questions]
                needed = num_questions - len(ordered_questions)
                ordered_questions.extend(remaining[:needed])
            
            # Limiter au nombre demand√©
            final_ordered = ordered_questions[:num_questions]
        
        # R√©assigner les num√©ros d'ordre
        for i, question in enumerate(final_ordered):
            question['order'] = i + 1
        
        logger.info(f"üìã Questions ordonn√©es: {[q.get('type', 'unknown') for q in final_ordered]}")
        logger.info(f"üéØ Progression difficult√©: {[q.get('difficulty_level', 'unknown') for q in final_ordered]}")
        
        return final_ordered

# Instance globale pour l'utilisation dans les vues
ai_generator = AIInterviewQuestionGenerator()

# Fonction utilitaire pour l'analyse de qualit√© (bonus)
def analyze_question_quality(questions: List[Dict]) -> Dict[str, Any]:
    """Analyse la qualit√© des questions g√©n√©r√©es"""
    if not questions:
        return {"score": 0, "feedback": "Aucune question √† analyser"}
    
    total_score = 0
    feedback = []
    
    # Crit√®res d'√©valuation
    question_types = set(q.get('type', '') for q in questions)
    if len(question_types) >= 2:
        total_score += 25
        feedback.append("‚úÖ Bonne vari√©t√© de types de questions")
    
    avg_duration = sum(q.get('expected_duration', 120) for q in questions) / len(questions)
    if 90 <= avg_duration <= 180:
        total_score += 25
        feedback.append("‚úÖ Dur√©e appropri√©e pour les r√©ponses")
    
    if len(questions) >= 3:
        total_score += 25
        feedback.append("‚úÖ Nombre de questions suffisant")
    
    has_skills = any(q.get('skills_assessed') for q in questions)
    if has_skills:
        total_score += 25
        feedback.append("‚úÖ Comp√©tences √©valu√©es d√©finies")
    
    return {
        "score": total_score,
        "feedback": feedback,
        "question_count": len(questions),
        "avg_duration": round(avg_duration),
        "question_types": list(question_types)
    }
