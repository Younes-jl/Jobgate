#!/usr/bin/env python
"""
Test r√©el du syst√®me d'√©valuation IA avec une vid√©o d'entretien
Ce script teste l'API compl√®te d'√©valuation IA
"""

import os
import sys
import django
import requests
import json
from django.conf import settings

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'prototype.settings')
django.setup()

from interviews.models import InterviewAnswer, AiEvaluation
from interviews.services.ai_video_evaluation_service import AIVideoEvaluationService
from users.models import CustomUser

def test_gemini_api_key():
    """Teste si la cl√© API Gemini est configur√©e"""
    print("üîë Test de la configuration Gemini API...")
    
    api_key = getattr(settings, 'GOOGLE_GEMINI_API_KEY', None)
    if not api_key or api_key == 'your_gemini_api_key_here':
        print("‚ùå GOOGLE_GEMINI_API_KEY non configur√©e")
        print("üìã Instructions:")
        print("   1. Obtenez votre cl√© API sur https://makersuite.google.com/app/apikey")
        print("   2. Ajoutez GOOGLE_GEMINI_API_KEY=votre_cle dans votre fichier .env")
        print("   3. Red√©marrez le serveur Django")
        return False
    else:
        print(f"‚úÖ Cl√© API Gemini configur√©e (longueur: {len(api_key)} caract√®res)")
        return True

def find_test_video():
    """Trouve une r√©ponse vid√©o pour les tests"""
    print("\nüé• Recherche d'une vid√©o de test...")
    
    # Chercher une r√©ponse avec vid√©o Cloudinary
    video_answers = InterviewAnswer.objects.filter(
        cloudinary_secure_url__isnull=False
    ).exclude(cloudinary_secure_url='').select_related(
        'candidate', 'question__campaign'
    )
    
    if not video_answers.exists():
        # Chercher avec cloudinary_url si secure_url n'existe pas
        video_answers = InterviewAnswer.objects.filter(
            cloudinary_url__isnull=False
        ).exclude(cloudinary_url='').select_related(
            'candidate', 'question__campaign'
        )
    
    if video_answers.exists():
        answer = video_answers.first()
        print(f"‚úÖ Vid√©o trouv√©e:")
        print(f"   - ID: {answer.id}")
        print(f"   - Candidat: {answer.candidate.username}")
        print(f"   - Question: {answer.question.text[:50]}...")
        print(f"   - URL: {answer.cloudinary_secure_url or answer.cloudinary_url}")
        return answer
    else:
        print("‚ùå Aucune vid√©o d'entretien trouv√©e")
        print("üí° Pour tester, vous devez avoir au moins une r√©ponse avec vid√©o Cloudinary")
        return None

def test_ai_service_direct(video_answer):
    """Test direct du service d'√©valuation IA"""
    print(f"\nü§ñ Test direct du service IA pour la r√©ponse {video_answer.id}...")
    
    try:
        ai_service = AIVideoEvaluationService()
        
        # V√©rifier si une √©valuation existe d√©j√†
        existing_eval = AiEvaluation.objects.filter(interview_answer=video_answer).first()
        if existing_eval:
            print(f"‚ö†Ô∏è √âvaluation existante trouv√©e (ID: {existing_eval.id})")
            print(f"   - Statut: {existing_eval.status}")
            if existing_eval.status == 'completed':
                print(f"   - Score communication: {existing_eval.communication_score}")
                print(f"   - Score pertinence: {existing_eval.relevance_score}")
                print(f"   - Score confiance: {existing_eval.confidence_score}")
                print(f"   - Score global: {existing_eval.overall_ai_score}")
                return existing_eval
        
        # Lancer une nouvelle √©valuation
        print("üöÄ Lancement de l'√©valuation IA...")
        result = ai_service.evaluate_video_answer(video_answer.id)
        
        if result:
            print("‚úÖ √âvaluation IA r√©ussie!")
            print(f"   - ID √©valuation: {result['evaluation_id']}")
            print(f"   - Statut: {result['status']}")
            if result.get('scores'):
                scores = result['scores']
                print(f"   - Communication: {scores.get('communication', 'N/A')}")
                print(f"   - Pertinence: {scores.get('relevance', 'N/A')}")
                print(f"   - Confiance: {scores.get('confidence', 'N/A')}")
                print(f"   - Global: {scores.get('overall', 'N/A')}")
            return result
        else:
            print("‚ùå √âchec de l'√©valuation IA")
            return None
            
    except Exception as e:
        print(f"‚ùå Erreur lors de l'√©valuation: {e}")
        return None

def test_api_endpoints(video_answer):
    """Test des endpoints API d'√©valuation IA"""
    print(f"\nüåê Test des endpoints API...")
    
    # URL de base (ajustez selon votre configuration)
    base_url = "http://localhost:8000/api/interviews"
    
    # Test 1: D√©clencher une √©valuation
    print("üì° Test POST /ai-evaluations/evaluate_video/")
    
    payload = {
        "interview_answer_id": video_answer.id,
        "force_reevaluation": False
    }
    
    print(f"   Payload: {json.dumps(payload, indent=2)}")
    print("   üí° Pour tester l'API, utilisez:")
    print(f"   curl -X POST {base_url}/ai-evaluations/evaluate_video/ \\")
    print("        -H 'Content-Type: application/json' \\")
    print("        -H 'Authorization: Bearer YOUR_TOKEN' \\")
    print(f"        -d '{json.dumps(payload)}'")
    
    # Test 2: R√©cup√©rer les √©valuations
    print(f"\nüì° Test GET /ai-evaluations/by_candidate/")
    print(f"   üí° Pour r√©cup√©rer les √©valuations du candidat:")
    print(f"   curl -X GET '{base_url}/ai-evaluations/by_candidate/?candidate_id={video_answer.candidate.id}' \\")
    print("        -H 'Authorization: Bearer YOUR_TOKEN'")

def create_test_script():
    """Cr√©e un script de test API complet"""
    print("\nüìù Cr√©ation du script de test API...")
    
    script_content = '''#!/bin/bash
# Script de test pour l'API d'√©valuation IA
# Remplacez YOUR_TOKEN par un token d'authentification valide

BASE_URL="http://localhost:8000/api/interviews"
TOKEN="YOUR_TOKEN"

echo "üß™ Test de l'API d'√©valuation IA JobGate"
echo "========================================"

# Test 1: Liste des √©valuations IA
echo "üìã 1. Liste des √©valuations IA"
curl -X GET "$BASE_URL/ai-evaluations/" \\
     -H "Authorization: Bearer $TOKEN" \\
     -H "Content-Type: application/json" | jq .

echo -e "\\n"

# Test 2: D√©clencher une √©valuation (remplacez ANSWER_ID)
echo "üöÄ 2. D√©clencher une √©valuation IA"
curl -X POST "$BASE_URL/ai-evaluations/evaluate_video/" \\
     -H "Authorization: Bearer $TOKEN" \\
     -H "Content-Type: application/json" \\
     -d '{"interview_answer_id": ANSWER_ID, "force_reevaluation": false}' | jq .

echo -e "\\n"

# Test 3: √âvaluations par campagne (remplacez CAMPAIGN_ID)
echo "üìä 3. √âvaluations par campagne"
curl -X GET "$BASE_URL/ai-evaluations/by_campaign/?campaign_id=CAMPAIGN_ID" \\
     -H "Authorization: Bearer $TOKEN" \\
     -H "Content-Type: application/json" | jq .

echo -e "\\n"

# Test 4: √âvaluations par candidat (remplacez CANDIDATE_ID)
echo "üë§ 4. √âvaluations par candidat"
curl -X GET "$BASE_URL/ai-evaluations/by_candidate/?candidate_id=CANDIDATE_ID" \\
     -H "Authorization: Bearer $TOKEN" \\
     -H "Content-Type: application/json" | jq .

echo "‚úÖ Tests termin√©s"
'''
    
    with open('test_ai_api.sh', 'w') as f:
        f.write(script_content)
    
    print("‚úÖ Script cr√©√©: test_ai_api.sh")
    print("üí° Rendez-le ex√©cutable avec: chmod +x test_ai_api.sh")

def main():
    """Fonction principale de test"""
    print("üöÄ TEST COMPLET DU SYST√àME D'√âVALUATION IA")
    print("=" * 60)
    
    # Test 1: Configuration
    if not test_gemini_api_key():
        print("\n‚ùå Configuration incompl√®te. Configurez d'abord GOOGLE_GEMINI_API_KEY")
        return False
    
    # Test 2: Trouver une vid√©o de test
    video_answer = find_test_video()
    if not video_answer:
        print("\n‚ùå Aucune vid√©o de test disponible")
        return False
    
    # Test 3: Service IA direct
    result = test_ai_service_direct(video_answer)
    
    # Test 4: Documentation API
    test_api_endpoints(video_answer)
    
    # Test 5: Script de test
    create_test_script()
    
    print("\n" + "=" * 60)
    if result:
        print("üéâ SYST√àME D'√âVALUATION IA OP√âRATIONNEL!")
        print("‚úÖ L'√©valuation IA fonctionne correctement")
    else:
        print("‚ö†Ô∏è SYST√àME PARTIELLEMENT OP√âRATIONNEL")
        print("üîß V√©rifiez la configuration et les logs pour plus de d√©tails")
    
    print("\nüìã PROCHAINES √âTAPES:")
    print("   1. Configurez GOOGLE_GEMINI_API_KEY si ce n'est pas fait")
    print("   2. Testez l'API avec le script test_ai_api.sh")
    print("   3. Int√©grez l'interface frontend")
    
    return True

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(f"\nüí• ERREUR: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
