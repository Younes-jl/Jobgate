#!/usr/bin/env python
"""
Test sp√©cifique pour la g√©n√©ration de questions cybers√©curit√©
"""
import os
import sys
import django

# Configuration Django
sys.path.append('backend')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'prototype.settings')
django.setup()

from interviews.ai_service import AIInterviewQuestionGenerator

def test_cybersecurity_questions():
    """Test avec une offre d'emploi cybers√©curit√©"""
    
    generator = AIInterviewQuestionGenerator()
    
    print("üîí TEST CYBERS√âCURIT√â")
    print("=" * 60)
    
    # Test avec offre cybers√©curit√©
    offer_title = "Expert Cybers√©curit√© - Audit et Tests de P√©n√©tration"
    offer_description = """
    Nous recherchons un expert en cybers√©curit√© pour renforcer notre √©quipe s√©curit√©.
    Vous serez responsable des audits de s√©curit√©, tests de p√©n√©tration et gestion des incidents.
    Ma√Ætrise des outils Burp Suite, Metasploit, Nmap requis.
    Exp√©rience en forensic num√©rique et analyse de malware appr√©ci√©e.
    """
    requirements = "Burp Suite, Metasploit, Nmap, Wireshark, Kali Linux, CISSP, CEH, ISO 27001, OWASP"
    
    # Test analyse du domaine
    job_context = generator._deep_analyze_job_offer(offer_title, offer_description, requirements)
    
    print("üîç ANALYSE DU POSTE:")
    print(f"Type d√©tect√©: {job_context['analysis']}")
    print(f"Secteur: {job_context['industry_sector']}")
    print(f"Mots-cl√©s extraits: {job_context['keywords'][:5]}")
    print(f"Outils d√©tect√©s: {job_context['tools_technologies'][:5]}")
    print()
    
    # G√©n√©ration des questions
    questions = generator.generate_questions(
        offer_title=offer_title,
        offer_description=offer_description,
        requirements=requirements,
        number_of_questions=5,
        difficulty='medium'
    )
    
    print(f"üìù QUESTIONS G√âN√âR√âES: {len(questions)}")
    print("-" * 60)
    
    for i, q in enumerate(questions, 1):
        print(f"{i}. {q['question']}")
        print(f"   Type: {q['type']} | Difficult√©: {q['difficulty']}")
        
        # V√©rification que la question contient des termes cybers√©curit√©
        cyber_terms = ['s√©curit√©', 'security', 'pentest', 'audit', 'firewall', 'malware', 
                      'cryptographie', 'chiffrement', 'incident', 'vuln√©rabilit√©', 
                      'burp', 'metasploit', 'nmap', 'wireshark']
        
        question_lower = q['question'].lower()
        found_terms = [term for term in cyber_terms if term in question_lower]
        
        if found_terms:
            print(f"   ‚úÖ Termes cybers√©curit√© d√©tect√©s: {found_terms[:3]}")
        else:
            print(f"   ‚ùå ATTENTION: Aucun terme cybers√©curit√© d√©tect√©!")
        print()

if __name__ == "__main__":
    test_cybersecurity_questions()
